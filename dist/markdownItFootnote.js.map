{"version":3,"file":"markdownItFootnote.modern.js","sources":["../index.ts"],"sourcesContent":["// Process footnotes\n//\n\nimport { strict as assert } from 'assert';\n\n\n////////////////////////////////////////////////////////////////////////////////\n// Renderer partials\n\nfunction anchorFnDefault(n, excludeSubId, tokens, idx, options, env, slf) {\n  let prefix = '';\n  if (typeof env.docId === 'string' && env.docId.length > 0) {\n    prefix = '-' + env.docId + '-';\n  }\n  return prefix + n;\n}\n\nfunction captionFnDefault(n, tokens, idx, options, env, slf) {\n  //return '[' + n + ']';\n  return '' + n;\n}\n\nfunction headerFnDefault(state, category, env, plugin_options) {\n  switch (category) {\n  case 'aside':\n    return 'Side Notes';\n\n  case 'section':\n    return 'Section Notes';\n\n  case 'end':\n    return 'Endnotes';\n  }\n  return '';\n}\n\nfunction determine_footnote_symbol(idx: number, info, env, plugin_options): string {\n  // rule to construct the printed label:\n  //\n  //     mark = labelOverride  /* || info.label */  || idx;\n  const label = info.labelOverride;\n  if (label) {\n    return label;\n  }\n  if (plugin_options.numberSequence == null || plugin_options.numberSequence.length === 0) {\n    return '' + idx;\n  }\n  const len = plugin_options.numberSequence.length;\n  if (idx >= len) {\n    // is last slot numeric or alphanumerically?\n    const slot = plugin_options.numberSequence[len - 1];\n    if (Number.isFinite(slot)) {\n      const delta = idx - len + 1;\n      return '' + (slot + delta);\n    }\n\n    // non-numerical last slot --> duplicate, triplicate, etc.\n    const dupli = (idx / len) | 0;  // = int(x mod N)\n    const remainder = idx % len;\n    const core = plugin_options.numberSequence[remainder];\n    let str = '' + core;\n    for (let i = 1; i < dupli; i++) {\n      str += core;\n    }\n    return str;\n  }\n\n  return '' + plugin_options.numberSequence[idx];\n}\n\n\n\n\n/*\nref:\n  return `<label aria-describedby=\"fn${id}\" role=\"presentation\" class=\"sidelink\" for=\"fn${id}-content\">\n<a aria-hidden=\"true\" href=\"#fn${id}\"><output class=\"highlight fnref\" id=\"fnref${refid}\">${caption}\n</output></a></label>`;\n\n\nopen:\n  return `<aside id=\"fn${id}\" class=\"sidenote\" role=\"note\">\n    <output aria-hidden=\"true\" class=\"highlight\" id=\"fn${id}-content\">\n    <label role=\"presentation\" for=\"fnref${id}\">`;\n}\n\nfunction render_sidenote_close() {\n  return '</label></output></aside>\\n';\n}\n\n*/\n\nconst default_plugin_options = {\n  // atDocumentEnd: false,               -- obsoleted option of the original plugin\n\n  anchorFn: anchorFnDefault,\n  captionFn: captionFnDefault,\n  headerFn: headerFnDefault,\n  mkLabel: determine_footnote_symbol,\n\n  // see also https://www.editage.com/insights/footnotes-in-tables-part-1-choice-of-footnote-markers-and-their-sequence\n  // why asterisk/star is not part of the default footnote marker sequence.\n  //\n  // For similar reasons, we DO NOT include the section § symbol in this list.\n  //\n  // when numberSequnce is NULL/empty, a regular numerical numbering is assumed.\n  // Otherwise, the array is indexed; when there are more footnotes than entries in\n  // the numberSequence array, the entries are re-used, but doubled/trippled, etc.\n  //\n  // When the indexing in this array hits a NUMERIC value (as last entry), any higher\n  // footnotes are NUMBERED starting at that number.\n  //\n  // NOTE: as we can reference the same footnote from multiple spots, we do not depend\n  // on CSS counter() approaches by default, but providee this mechanism in the plugin\n  // code itself.\n  numberSequence: [ '†', '‡', '††', '‡‡', '¶', 1 ],\n\n  // Overrides the footnode mode when set to one of the following:\n  //\n  // Recognized 'modes':\n  // '>': aside note (default for inline notes)\n  // ':': end node\n  // '=': section note (default for regular referenced notes)\n  //\n  modeOverride: null,\n\n  // list section notes and endnotes in order of:\n  //\n  // 0: first *appearance* in the text\n  // 1: first *reference* in the text\n  // 2: *definition* in the text\n  // 3: sorted alphanumerically by *coded* label,\n  //    i.e. *numeric* labels are sorted in numeric order (so `10` comes AFTER `7`!),\n  //    while all others are sorted using `String.localeCompare()`. When labels have\n  //    a *numeric leading*, e.g. `71geo` --> `71`, that part is sorted numerically first.\n  //\n  //    Here 'coded label' means the label constructed from the reference ids and label overrides\n  //    as used in the markdown source, using the expression\n  //           labelOverride || reference || id\n  //    which gives for these examples (assuming them to be the only definitions in your input):\n  //           [^refA]: ...      -->  null || 'refA' || 1\n  //           [^refB LBL]: ...  -->  'LBL' || 'refB' || 2\n  // 4: sorted alphanumerically by *printed* label\n  //    which is like mode 3, but now for the label as will be seen in the *output*!\n  sortOrder: 4,\n\n  // what to print between bunched-together footnote references, i.e. the '+' in `blabla¹⁺²`\n  refCombiner: ','\n};\n\nexport default function footnote_plugin(md, plugin_options) {\n  const parseLinkLabel = md.helpers.parseLinkLabel,\n        isSpace = md.utils.isSpace;\n\n  plugin_options = Object.assign({}, plugin_options, default_plugin_options);\n\n  function determine_mode(mode: string, default_mode: string) {\n    let override = null;\n    if (plugin_options.modeOverride && '>:='.includes(plugin_options.modeOverride)) {\n      override = plugin_options.modeOverride;\n    }\n    if ('>:='.includes(mode)) {\n      return {\n        mode: override || mode,\n        fromInput: true\n      };\n    }\n    return {\n      mode: override || default_mode,\n      fromInput: false\n    };\n  }\n\n  function render_footnote_n(tokens, idx, excludeSubId) {\n    const mark = tokens[idx].meta.id;\n    assert.ok(Number.isFinite(mark));\n    assert.ok(mark > 0);\n    let n = '' + mark; // = mark.toString();\n    assert.ok(n.length > 0);\n\n    if (!excludeSubId && tokens[idx].meta.subId > 0) {\n      n += '-' + tokens[idx].meta.subId;\n    }\n\n    return n;\n  }\n\n  function render_footnote_mark(tokens, idx, env) {\n    const token = tokens[idx];\n    assert.ok(token != null);\n    const info = env.footnotes.list[token.meta.id];\n    assert.ok(info != null);\n    const mark: string = plugin_options.mkLabel(token.meta.id, info, env, plugin_options);\n    assert.ok(mark.length > 0);\n    return mark;\n  }\n\n  function render_footnote_anchor_name(tokens, idx, options, env, slf) {\n    const n = render_footnote_n(tokens, idx, true);\n    return plugin_options.anchorFn(n, true, tokens, idx, options, env, slf);\n  }\n\n  function render_footnote_anchor_nameRef(tokens, idx, options, env, slf) {\n    const n = render_footnote_n(tokens, idx, false);\n    return plugin_options.anchorFn(n, false, tokens, idx, options, env, slf);\n  }\n\n  function render_footnote_caption(tokens, idx, options, env, slf) {\n    const n = render_footnote_mark(tokens, idx, env);\n    return plugin_options.captionFn(n, tokens, idx, options, env, slf);\n  }\n\n  const bunched_mode_classes = [ '', 'footnote-bunched-ref-ref', 'footnote-bunched-ref-text' ];\n\n  function render_footnote_ref(tokens, idx, options, env, slf) {\n    const id      = render_footnote_anchor_name(tokens, idx, options, env, slf);\n    const caption = render_footnote_caption(tokens, idx, options, env, slf);\n    const refid   = render_footnote_anchor_nameRef(tokens, idx, options, env, slf);\n\n    // check if multiple footnote references are bunched together:\n    // IFF they are, we should separate them with commas.\n    //\n    // Exception: when next token has an extra text (`meta.text`) the\n    // bunching together is not a problem as them the output will render\n    // like this: `bla<sup>1</sup><a>text<sup>2</sup></a>`, ergo a look\n    // like this: `bla¹text²` instead of bunched footnotes references ¹ and ²\n    // that would (without the extra comma injection) look like `bla¹²` instead\n    // of `x¹⁺²` (here '+' instead of ',' comma, but you get the idea -- there's no\n    // Unicode superscript-comma so that's why I used unicode superscript-plus\n    // in this 'ascii art' example).\n    //\n    const next_token = tokens[idx + 1] || {};\n    const next_token_meta = next_token.meta || {};\n    const bunched_footnote_ref_mode = (next_token.type === 'footnote_ref' ? !next_token_meta.text ? 1 : 2 : 0);\n\n    return `<a class=\"footnote-ref ${ bunched_mode_classes[bunched_footnote_ref_mode] }\" href=\"#fn${ id }\" id=\"fnref${ refid }\">${ tokens[idx].meta.text || '' }<sup class=\"footnote-ref\">${ caption }</sup></a>` +\n      (bunched_footnote_ref_mode !== 0 ? `<sup class=\"footnote-ref-combiner ${ bunched_mode_classes[bunched_footnote_ref_mode] }\">${ plugin_options.refCombiner }</sup>` : '');\n  }\n\n  function render_footnote_block_open(tokens, idx, options) {\n    const tok = tokens[idx];\n    assert(tok != null);\n    assert(tok.meta != null);\n    const header = (tok.markup ? `<h3 class=\"footnotes-header\">${ tok.markup }</h3>` : '');\n    const category = tok.meta.category;\n    return `<hr class=\"footnotes-sep footnotes-category-${ category }\" id=\"fnsection-hr-${ tok.meta.sectionId }\"${ options.xhtmlOut ? ' /' : '' }><aside class=\"footnotes footnotes-category-${ category }\" id=\"fnsection-${ tok.meta.sectionId }\">${ header }<ul class=\"footnotes-list\">\\n`;\n  }\n\n  function render_footnote_block_close(tokens, idx, options) {\n    return '</ul>\\n</aside>\\n';\n  }\n\n  function render_footnote_reference_open(tokens, idx, options) {\n    return '<!-- footnote reference start -->\\n';\n  }\n\n  function render_footnote_reference_close() {\n    return '<!-- footnote reference end -->\\n';\n  }\n\n  function render_footnote_mark_end_of_block() {\n    return '<!-- footnote dump marker -->\\n';\n  }\n\n  function render_footnote_open(tokens, idx, options, env, slf) {\n    const id = render_footnote_anchor_name(tokens, idx, options, env, slf);\n    const caption = render_footnote_caption(tokens, idx, options, env, slf);\n\n    // allow both a JavaWScript --> CSS approach via `data-footnote-caption`\n    // and a classic CSS approach while a display:inline-block SUP presenting\n    // the LI 'button' instead:\n    return `<li tabindex=\"-1\" id=\"fn${ id }\" class=\"footnote-item\" data-footnote-caption=\"${ caption }\"><span class=\"footnote-caption\"><sup class=\"footnote-caption\">${ caption }</sup></span><span class=\"footnote-content\">`;\n  }\n\n  function render_footnote_close() {\n    return '</span></li>\\n';\n  }\n\n  function render_footnote_anchor_backref(tokens, idx, options, env, slf) {\n    const tok = tokens[idx];\n    assert(tok != null);\n    assert(tok.meta != null);\n    let refid = render_footnote_n(tokens, idx, false);\n    refid = plugin_options.anchorFn(refid, false, tokens, idx, options, env, slf);\n\n    /* ↩ with escape code to prevent display as Apple Emoji on iOS */\n    return ` <a href=\"#fnref${ refid }\" class=\"footnote-backref footnote-backref-${ tok.meta.subId } footnote-backref-R${ tok.meta.backrefCount - tok.meta.subId - 1 }\">\\u21a9\\uFE0E</a>`;\n  }\n\n\n  md.renderer.rules.footnote_ref          = render_footnote_ref;\n  md.renderer.rules.footnote_block_open   = render_footnote_block_open;\n  md.renderer.rules.footnote_block_close  = render_footnote_block_close;\n  md.renderer.rules.footnote_reference_open   = render_footnote_reference_open;\n  md.renderer.rules.footnote_reference_close  = render_footnote_reference_close;\n  md.renderer.rules.footnote_mark_end_of_block = render_footnote_mark_end_of_block;\n  md.renderer.rules.footnote_open         = render_footnote_open;\n  md.renderer.rules.footnote_close        = render_footnote_close;\n  md.renderer.rules.footnote_anchor       = render_footnote_anchor_backref;\n\n  function obtain_footnote_info_slot(env, label: string|null, at_definition: boolean) {\n    if (!env.footnotes) {\n      env.footnotes = {\n        // map label tto ID:\n        refs: {},\n        // store footnote info indexed by ID\n        list: [],\n        // remap ID to re-ordered ID (determines placement order for section notes and endnotes)\n        idMap: [ 0 ],\n        idMapCounter: 0,\n\n        // and a counter for the generated sections (including asides); see the demo/test which\n        // uses the generated `#fnsection-DDD` identifiers to hack/fix the styling, for example.\n        sectionCounter: 0\n      };\n    }\n\n    // When label is NULL, this is a request from in INLINE NOTE.\n\n    // NOTE: IDs are index numbers, BUT they start at 1 instead of 0 to make life easier in check code:\n    let footnoteId;\n    let infoRec;\n    // label as index: prepend ':' to avoid conflict with Object.prototype members\n    if (label == null || !env.footnotes.refs[':' + label]) {\n      footnoteId = Math.max(1, env.footnotes.list.length);\n      infoRec = {\n        id: footnoteId,\n        label,\n        labelOverride: null,\n        mode: null,\n        content: null,\n        tokens: null,\n        count: 0\n      };\n      env.footnotes.list[footnoteId] = infoRec;\n      if (label != null) {\n        env.footnotes.refs[':' + label] = footnoteId;\n      }\n    } else {\n      footnoteId = env.footnotes.refs[':' + label];\n      infoRec = env.footnotes.list[footnoteId];\n      console.assert(!!infoRec, 'expects non-NULL footnote info record');\n    }\n\n    const idMap = env.footnotes.idMap;\n\n    // now check if the idMap[] has been set up already as well. This depends on\n    // when WE are invoked (`at_definition`) and the configured `options.sortOrder`:\n    switch (plugin_options.sortOrder) {\n    // 0: first *appearance* in the text\n    default:\n    case 0:\n      // basically, this means: order as-is\n      if (!idMap[footnoteId]) {\n        idMap[footnoteId] = ++env.footnotes.idMapCounter;\n      }\n      break;\n\n    // 1: first *reference* in the text\n    case 1:\n      if (!at_definition && !idMap[footnoteId]) {\n        // first reference is now!\n        idMap[footnoteId] = ++env.footnotes.idMapCounter;\n      }\n      break;\n\n    // 2: *definition* in the text\n    case 2:\n      if (at_definition && !idMap[footnoteId]) {\n        // definition is now!\n        idMap[footnoteId] = ++env.footnotes.idMapCounter;\n      }\n      break;\n\n    // 3: sorted alphanumerically by label (inline footnotes will end up at the top, before all other notes)\n    case 3:\n      // just note the footnoteId now; this must be re-ordered later when we have collected all footnotes.\n      //\n      // set it up when we get there...\n      break;\n    }\n\n    return infoRec;\n  }\n\n  function find_end_of_block_marker(state, startIndex) {\n    let idx, len;\n    const tokens = state.tokens;\n    for (idx = startIndex, len = tokens.length; idx < len; idx++) {\n      if (tokens[idx].type === 'footnote_mark_end_of_block') { return idx; }\n    }\n    //console.error({ tok: tokens.slice(startIndex), startIndex, idx, len });\n    //throw Error('Should never get here!');\n\n    // Punch a slot into the token stream (at the very end)\n    // for consistency with footnote_mark_end_of_block():\n    //footnote_mark_end_of_block(state, startLine, endLine, silent);\n    const token = new state.Token('footnote_mark_end_of_block', '', 0);\n    token.hidden = true;\n    //token.meta = {\n    //  EndOfFile: true\n    //};\n    tokens.push(token);\n    return tokens.length - 1;\n  }\n\n  function update_end_of_block_marker(state, footnoteId) {\n    // inject marker into parent = block level token stream to announce the advent of an (inline) footnote:\n    // because the markdown_it code uses a for() loop to go through the parent nodes while parsing the\n    // 'inline' chunks, we CANNOT safely inject a marker BEFORE the chunk, only AFTERWARDS:\n    const parentState = state.env.parentState;\n    const parentIndex = state.env.parentTokenIndex;\n    const markerTokenIndex = find_end_of_block_marker(parentState, parentIndex + 1);\n    const token = parentState.tokens[markerTokenIndex];\n    if (!token.meta) {\n      token.meta = {\n        footnote_list: []\n      };\n    }\n    token.meta.footnote_list.push(footnoteId);\n  }\n\n  // Mark end of paragraph/heading/whatever BLOCK (or rather: START of the next block!)\n  function footnote_mark_end_of_block(state, startLine, endLine, silent) {\n    if (!silent && state.tokens.length > 0) {\n      const token = state.push('footnote_mark_end_of_block', '', 0);\n      token.hidden = true;\n    }\n    return false;\n  }\n\n  // Process footnote block definition\n  function footnote_def(state, startLine, endLine, silent) {\n    let oldBMark, oldTShift, oldSCount, oldParentType, pos, label, token,\n        initial, offset, ch, posAfterColon,\n        start = state.bMarks[startLine] + state.tShift[startLine],\n        max = state.eMarks[startLine];\n\n    // line should be at least 6 chars - \"[^x]: \" or \"[^x]:> \"\n    if (start + 5 > max) { return false; }\n\n    if (state.src.charCodeAt(start) !== 0x5B/* [ */) { return false; }\n    if (state.src.charCodeAt(start + 1) !== 0x5E/* ^ */) { return false; }\n\n    for (pos = start + 2; pos < max; pos++) {\n      if (state.src.charCodeAt(pos) === 0x0A /* LF */) { return false; }\n      if (state.src.charCodeAt(pos) === 0x5D /* ] */) {\n        break;\n      }\n    }\n    const labelEnd = pos;\n\n    if (pos === start + 2) { return false; } // no empty footnote labels\n    if (pos + 1 >= max || state.src.charCodeAt(++pos) !== 0x3A /* : */) { return false; }\n\n    const mode_rec = determine_mode(state.src[pos + 1], '=');   // default mode is section_note mode.\n    if (mode_rec.fromInput) { pos++; }\n    const mode = mode_rec.mode;\n\n    if (pos + 1 >= max || state.src.charCodeAt(++pos) !== 0x20 /* space */) { return false; }\n    if (silent) { return true; }\n    pos++;\n\n    label = state.src.slice(start + 2, labelEnd);\n    let text;\n    if (label.match(/^(\\S+)\\s+(.+)$/)) {\n      label = RegExp.$1;\n      text = RegExp.$2;\n    }\n\n    //console.error('extracted label = ', { label, text, labelEnd, pos, start });\n\n    // Now see if we already have a footnote ID for this footnote label:\n    // fetch it if we have one and otherwise produce a new one so everyone\n    // can use this from now on.\n    //\n    // This scenario is possible when the footnote *definition* comes BEFORE\n    // the first actual footnote *use* (*reference*). This is UNUSUAL when people\n    // write texts, but it is *not impossible*, particularly now that we have\n    // specified-by-design that endnotes can be marked as such (`[^label]:: note text`)\n    // and freely mixed with sidenotes (`[^label]:> note text`) and section\n    // notes (`[^label]:= note text` (explicit mode) or `[^label]: note text`\n    // (implicit mode)), where *section notes* will placed at the spot in the text\n    // flow where they were *defined*. Again, highly irregular, BUT someone MAY\n    // feel the need to place some section note *definitions* ABOVE their first\n    // use point.\n    //\n    const infoRec = obtain_footnote_info_slot(state.env, label, true);\n\n    infoRec.labelOverride = text;\n    infoRec.mode = mode;\n\n    token = state.push('footnote_reference_open', '', 1);\n    token.meta = {\n      id: infoRec.id\n    };\n    token.hidden = true;\n\n    oldBMark = state.bMarks[startLine];\n    oldTShift = state.tShift[startLine];\n    oldSCount = state.sCount[startLine];\n    oldParentType = state.parentType;\n\n    posAfterColon = pos;\n    initial = offset = state.sCount[startLine] + pos - (state.bMarks[startLine] + state.tShift[startLine]);\n\n    while (pos < max) {\n      ch = state.src.charCodeAt(pos);\n\n      if (isSpace(ch)) {\n        if (ch === 0x09) {\n          offset += 4 - offset % 4;\n        } else {\n          offset++;\n        }\n      } else {\n        break;\n      }\n\n      pos++;\n    }\n\n    state.tShift[startLine] = pos - posAfterColon;\n    state.sCount[startLine] = offset - initial;\n\n    state.bMarks[startLine] = posAfterColon;\n    state.blkIndent += 4;\n    state.parentType = 'footnote';\n\n    if (state.sCount[startLine] < state.blkIndent) {\n      state.sCount[startLine] += state.blkIndent;\n    }\n\n    state.md.block.tokenize(state, startLine, endLine, true);\n\n    state.parentType = oldParentType;\n    state.blkIndent -= 4;\n    state.tShift[startLine] = oldTShift;\n    state.sCount[startLine] = oldSCount;\n    state.bMarks[startLine] = oldBMark;\n\n    token = state.push('footnote_reference_close', '', -1);\n    token.meta = {\n      id: infoRec.id\n    };\n\n    return true;\n  }\n\n  // Process inline footnotes (^[...] or ^[>...])\n  function footnote_inline(state, silent) {\n    let labelStart,\n        labelEnd,\n        token,\n        tokens,\n        max = state.posMax,\n        start = state.pos;\n\n    if (start + 2 >= max) { return false; }\n    if (state.src.charCodeAt(start) !== 0x5E/* ^ */) { return false; }\n    if (state.src.charCodeAt(start + 1) !== 0x5B/* [ */) { return false; }\n\n    labelStart = start + 2;\n\n    // NOTE: inline notes are automatically considered to be ASIDE notes,\n    // UNLESS otherwise specified!\n    //\n    // Recognized 'modes':\n    // '>': aside note (default for inline notes)\n    // ':': end node\n    // '=': section note (default for regular referenced notes)\n    //\n    // (Also note https://v4.chriskrycho.com/2015/academic-markdown-and-citations.html:\n    // our notes look like this: `[^ref]:` while Academic MarkDown references look\n    // like this: `[@Belawog2012]` i.e. no '^' in there. Hence these can safely co-exist.)\n    //\n    const mode_rec = determine_mode(state.src[start + 2], '>');   // default mode is aside ~ sidenote mode.\n    if (mode_rec.fromInput) {\n      labelStart++;\n    }\n    const mode = mode_rec.mode;\n\n    labelEnd = parseLinkLabel(state, start + 1);\n\n    // parser failed to find ']', so it's not a valid note\n    if (labelEnd < 0) { return false; }\n\n    // We found the end of the link, and know for a fact it's a valid link;\n    // so all that's left to do is to call tokenizer.\n    //\n    if (!silent) {\n      // inline blocks have their own *child* environment in markdown-it v10+.\n      // As the footnotes must live beyond the lifetime of the inline block env,\n      // we must patch them into the `parentState.env` for the footnote_tail\n      // handler to be able to access them afterwards!\n      const parentState = state.env.parentState;\n      const parentEnv = parentState.env;\n\n      // WARNING: claim our footnote slot for there MAY be nested footnotes\n      // discovered in the next inline.parse() call below!\n      const infoRec = obtain_footnote_info_slot(parentEnv, null, true);\n      infoRec.mode = mode;\n      infoRec.count++;\n\n      token = state.push('footnote_ref', '', 0);\n      //token.meta = { id: footnoteId, subId: 0, label: null };\n      token.meta = {\n        id: infoRec.id\n      };\n\n      state.md.inline.parse(\n        state.src.slice(labelStart, labelEnd),\n        state.md,\n        state.env,\n        tokens = []\n      );\n\n      // Now fill our previously claimed slot:\n      infoRec.content = state.src.slice(labelStart, labelEnd);\n      infoRec.tokens = tokens;\n\n      // inject marker into parent = block level token stream to announce the advent of an (inline) footnote:\n      // because the markdown_it code uses a for() loop to go through the parent nodes while parsing the\n      // 'inline' chunks, we CANNOT safely inject a marker BEFORE the chunk, only AFTERWARDS:\n      update_end_of_block_marker(state, infoRec.id);\n\n      //md.block.ruler.enable('footnote_mark_end_of_block');\n    }\n\n    state.pos = labelEnd + 1;\n    state.posMax = max;\n    return true;\n  }\n\n  // Process footnote references with text ([^label ...])\n  function footnote_ref_with_text(state, silent) {\n    let label,\n        pos,\n        footnoteSubId,\n        token,\n        max = state.posMax,\n        start = state.pos;\n\n    // should be at least 6 chars - \"[^l x]\"\n    if (start + 5 > max) { return false; }\n\n    if (state.src.charCodeAt(start) !== 0x5B/* [ */) { return false; }\n    if (state.src.charCodeAt(start + 1) !== 0x5E/* ^ */) { return false; }\n\n    for (pos = start + 2; pos < max; pos++) {\n      if (state.src.charCodeAt(pos) === 0x0A /* linefeed */) { return false; }\n      if (state.src.charCodeAt(pos) === 0x5D /* ] */) {\n        break;\n      }\n    }\n\n    if (pos === start + 2) { return false; } // no empty footnote labels\n    if (pos >= max) { return false; }\n    pos++;\n\n    label = state.src.slice(start + 2, pos - 1);\n    if (!label || !label.match(/^(\\S+)\\s+(.+)$/)) { return false; }\n    label = RegExp.$1;\n    const text = RegExp.$2;\n\n    const infoRec = obtain_footnote_info_slot(state.env, label, false);\n\n    if (!silent) {\n      footnoteSubId = infoRec.count;\n\n      infoRec.count++;\n\n      token = state.push('footnote_ref', '', 0);\n      token.meta = {\n        id: infoRec.id,\n        subId: footnoteSubId\n      };\n\n      update_end_of_block_marker(state, infoRec.id);\n\n      //md.block.ruler.enable('footnote_mark_end_of_block');\n    }\n\n    state.pos = pos;\n    state.posMax = max;\n    return true;\n  }\n\n  // Process footnote references ([^...])\n  function footnote_ref(state, silent) {\n    let label,\n        pos,\n        footnoteSubId,\n        token,\n        max = state.posMax,\n        start = state.pos;\n\n    // should be at least 4 chars - \"[^x]\"\n    if (start + 3 > max) { return false; }\n\n    if (state.src.charCodeAt(start) !== 0x5B/* [ */) { return false; }\n    if (state.src.charCodeAt(start + 1) !== 0x5E/* ^ */) { return false; }\n\n    for (pos = start + 2; pos < max; pos++) {\n      if (state.src.charCodeAt(pos) === 0x20) { return false; }\n      if (state.src.charCodeAt(pos) === 0x0A) { return false; }\n      if (state.src.charCodeAt(pos) === 0x5D /* ] */) {\n        break;\n      }\n    }\n\n    if (pos === start + 2) { return false; } // no empty footnote labels\n    if (pos >= max) { return false; }\n    pos++;\n\n    label = state.src.slice(start + 2, pos - 1);\n\n    const infoRec = obtain_footnote_info_slot(state.env, label, false);\n\n    if (!silent) {\n      footnoteSubId = infoRec.count;\n\n      infoRec.count++;\n\n      token = state.push('footnote_ref', '', 0);\n      token.meta = {\n        id: infoRec.id,\n        subId: footnoteSubId\n      };\n\n      update_end_of_block_marker(state, infoRec.id);\n\n      //md.block.ruler.enable('footnote_mark_end_of_block');\n    }\n\n    state.pos = pos;\n    state.posMax = max;\n    return true;\n  }\n\n  function place_footnote_definitions_at(state, token_idx, footnote_id_list, category) {\n    if (footnote_id_list.length === 0) {\n      return; // nothing to inject...\n    }\n\n    let inject_tokens = [];\n    const foontnote_spec_list = state.env.footnotes.list;\n\n    let token = new state.Token('footnote_block_open', '', 1);\n    token.markup = plugin_options.headerFn(state, category, state.env, plugin_options);\n    token.meta = {\n      sectionId: ++state.env.footnotes.sectionCounter,\n      category\n    };\n    inject_tokens.push(token);\n\n    for (const id of footnote_id_list) {\n      const fn = foontnote_spec_list[id];\n      const inject_start_index = inject_tokens.length;\n\n      token      = new state.Token('footnote_open', '', 1);\n      token.meta = {\n        id,\n        category\n      };\n      inject_tokens.push(token);\n\n      if (fn.label == null) {\n        // process an inline footnote text:\n        token          = new state.Token('paragraph_open', 'p', 1);\n        token.block    = true;\n        inject_tokens.push(token);\n\n        token          = new state.Token('inline', '', 0);\n        token.children = fn.tokens;\n        token.content  = fn.content;\n        inject_tokens.push(token);\n\n        token          = new state.Token('paragraph_close', 'p', -1);\n        token.block    = true;\n        inject_tokens.push(token);\n      } else {\n        // process a labeled footnote:\n        inject_tokens = inject_tokens.concat(fn.tokens || []);\n      }\n\n      //let lastParagraph;\n      //if (inject_tokens[inject_tokens.length - 1].type === 'paragraph_close') {\n      //  lastParagraph = inject_tokens.pop();\n      //} else {\n      //  lastParagraph = null;\n      //}\n\n      const cnt = fn.count;\n      if (cnt < 1) {\n        console.error(`footnote ID ${id} is defined but never used. Footnote will be removed from the output!`, fn);\n        inject_tokens = inject_tokens.slice(0, inject_start_index);\n      } else {\n        for (let j = 0; j < cnt; j++) {\n          token = new state.Token('footnote_anchor', '', 0);\n          token.meta = {\n            id,\n            subId: j,\n            backrefCount: cnt,\n            category\n          };\n          inject_tokens.push(token);\n        }\n\n        //if (lastParagraph) {\n        //  inject_tokens.push(lastParagraph);\n        //}\n\n        token = new state.Token('footnote_close', '', -1);\n        token.meta = {\n          id,\n          category\n        };\n        inject_tokens.push(token);\n      }\n    }\n\n    token = new state.Token('footnote_block_close', '', -1);\n    token.meta = {\n      category\n    };\n    inject_tokens.push(token);\n\n    state.tokens.splice(token_idx, 0, ...inject_tokens);\n  }\n\n  function more_footnote_reference_blocks_follow_immediately(tokens, idx) {\n    let tok = tokens[idx];\n    while (tok && (tok.type === 'footnote_mark_end_of_block' || tok.type === 'footnote_reference_close')) {\n      idx++;\n      tok = tokens[idx];\n    }\n    return tok && (tok.type === 'footnote_reference_open');\n  }\n\n  // Glue footnote tokens into appropriate slots of token stream.\n  function footnote_tail(state, startLine, endLine, silent) {\n    let i, l, j, t, token, current, currentRefToken,\n        insideRef = false,\n        refTokens = {};\n\n    //console.error('@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ TAIL', state.env.footnotes);\n    if (!state.env.footnotes) {\n      // no footnotes at all? --> filter out all 'footnote_mark_end_of_block' chunks:\n      state.tokens = state.tokens.filter(function (tok, idx) {\n        return (tok.type !== 'footnote_mark_end_of_block');\n      });\n      return;\n    }\n\n    const idMap = state.env.footnotes.idMap;\n\n    function footnote_print_comparer(idA, idB) {\n      return idMap[idA] - idMap[idB];\n    }\n\n\n    // Rewrite the tokenstream to place the aside-footnotes and section footnotes where they need to be:\n    const list = state.env.footnotes.list;\n\n    // extract the tokens constituting the footnote/sidenote *content* and\n    // store that bunch in `refTokens[:<currentLabel>]` instead, to be injected back into\n    // the tokenstream at the appropriate spots.\n    state.tokens = state.tokens.filter(function (tok, idx) {\n      switch (tok.type) {\n      // filter out 'footnote_mark_end_of_block' tokens which follow BLOCKS that do not contain any\n      // footnote/sidenote/endnote references:\n      case 'footnote_mark_end_of_block':\n        if (!tok.meta) return false;\n        if (!tok.meta.footnote_list) return false;\n        break;\n\n      case 'footnote_reference_open':\n        insideRef = true;\n        current = [];\n        currentRefToken = tok;\n/*\n        if (tok.meta.mode === '>') {\n          aside_list.push(idx);\n        }\n*/\n        return true;\n\n      case 'footnote_reference_close':\n        insideRef = false;\n\n        const infoRec = list[tok.meta.id];\n        infoRec.tokens = current;\n\n        return true;\n      }\n      if (insideRef) {\n        current.push(tok);\n      }\n      return !insideRef;\n    });\n\n\n    // execute configured sorting/mapping (`idMap`):\n    switch (plugin_options.sortOrder) {\n    // 0: first *appearance* in the text\n    default:\n    case 0:\n    // 1: first *reference* in the text\n    case 1:\n    // 2: *definition* in the text\n    case 2:\n      // order is specified in the `idMap` already.\n      break;\n\n    // 3: sorted alphanumerically by label (inline footnotes will end up at the top, before all other notes)\n    case 3:\n      // the `idMap[]` array has not been set up and must be produced\n      // to turn this into an alphanumerically-by-label sort order, where\n      // a `footnoteId` based index will produce the order of appearance.\n      const reIdMap = [];\n      for (let i = 1; i < list.length; i++) {\n        reIdMap[i - 1] = i;\n      }\n      reIdMap.sort((idA, idB) => {\n        const infoA = list[idA];\n        const infoB = list[idB];\n        assert.ok(infoA);\n        assert.ok(infoB);\n\n        // is any of these an inline footnote, i.e. without any label yet? Produce a fake label for sorting then!\n        //\n        // As stated elsewhere: inline section_notes and end_notes will end up among everyone else in this sort order mode.\n        assert.ok(infoA.id === idA);\n        assert.ok(infoB.id === idB);\n\n        // Split a \"sort label\" up into its numerical part and the tail. Note that we don't call\n        // it 'tail' but 'label', because we will need to compare the ENTIRE LABEL using string comparison\n        // when the numeric leaders are identical, so as to ensure that 'labels' such as `00000` will sort\n        // as 'higher' than `000`, both of which will be rated as numerically identical!\n        function to_atoms(label) {\n          // now extract number or numerical leader part.\n          //\n          // Only accept OBVIOUS, SIMPLE NUMERIC LEADERS! This is about *legibility*\n          // of those numrical leaders, not a pedantic \"what is possibly legally numeric\"\n          // challenge. Hence we DO NOT accept leading +/- and only a decimal dot when\n          // there's a decimal number BEFORE it, such as in `5.1hack` --> `5.1`, but NOT\n          // `.42oz`!\n          //\n          // Do not use `nmr = +lbl` as that would treat labels such as `0xf4` as hexadecimal numbers,\n          // which we DO NOT want to happen.\n          const m = label.match(/^\\d+(?:\\.\\d+)?/) || [ 'x' ];\n          const nmr = +m[0] || Infinity;   // non-numeric labels are rated NUMEICALLY HIGHER than any numerical leader.\n          return {\n            label,\n            number: nmr\n          };\n        }\n\n        const labelA = infoA.labelOverride || infoA.label || ('' + infoA.id);\n        const labelB = infoB.labelOverride || infoB.label || ('' + infoB.id);\n        const atomA = to_atoms(labelA);\n        const atomB = to_atoms(labelB);\n        const diff = atomA.number - atomB.number;\n        return diff || atomA.label.localeCompare(atomB.label);\n        // ^^^^^^^ shorthand for:\n        //\n        // if (isNaN(diff) || diff === 0) then stringcompare else numeric-difference\n      });\n      console.error('$$$$$$$$$$$$$$$$ sort order map: $$$$$$$$$$$$$$', reIdMap.map((idx) => {\n        const info = list[idx];\n        if (!info) return '---';\n        assert.ok(info.id === idx);\n        return {\n          idx,\n          compareLabel: info.labelOverride /* || info.label */ || ('' + info.id),\n          info\n        };\n      }), reIdMap);\n\n      // Now turn this into a sort order map:\n      for (let prio = 0; prio < reIdMap.length; prio++) {\n        const id = reIdMap[prio];\n        idMap[id] = prio;\n      }\n      console.error('@@@@@@@@@@@@@@@@@', idMap);\n      break;\n    }\n\n\n    const inject_tokens = [];\n\n    // Now go through the token stream and place the sidenotes, section_notes and endnotes where they belong:\n    let aside_list;\n    let section_list = new Set();\n    const section_done_list = new Set();  // once a section_note has been printed, it should never appear again!\n    const end_list = new Set();\n\n    let tokens = state.tokens;\n    const foontnote_spec_list = state.env.footnotes.list;\n\n    for (i = 0; i < tokens.length; i++) {\n      const tok = tokens[i];\n      switch (tok.type) {\n      case 'footnote_mark_end_of_block':\n        // check the gathered list of footnotes referenced in this block:\n        // - dump the ones which are sidenotes\n        // - mark the ones which are section- or end-notes.\n        //\n        // Note: make sure we don't produce duplicates in the collect sets.\n        {\n          aside_list = new Set();\n\n          const refd_notes_list = (tok.meta?.footnote_list || []);\n          //console.error({ refd_notes_list });\n          for (const id of refd_notes_list) {\n            const footnote = foontnote_spec_list[id];\n            //console.error({ id, footnote, foontnote_spec_list });\n\n            switch (footnote.mode) {\n            case '>':\n              aside_list.add(id);\n              break;\n\n            case '=':\n              if (!section_done_list.has(id)) {\n                section_list.add(id);\n                section_done_list.add(id);\n              }\n              break;\n\n            default:\n            case ':':\n              end_list.add(id);\n              break;\n            }\n          }\n\n          const aside_ids = [];\n          for (const id of aside_list.values()) {\n            aside_ids.push(id);\n          }\n          aside_ids.sort(footnote_print_comparer);\n\n          place_footnote_definitions_at(state, i + 1, aside_ids, 'aside');\n          tokens = state.tokens;\n        }\n        break;\n\n      case 'footnote_reference_close':\n        // anywhere a footnote *definition* appeared in the original text is\n        // also a place to dump the section_notes gathered to date, so to speak.\n        //\n        // However, DO detect clusters of footnote definitions and MERGE them\n        // together:\n        if (more_footnote_reference_blocks_follow_immediately(tokens, i + 1)) {\n          continue;\n        } else {\n          const section_ids = [];\n          for (const id of section_list.values()) {\n            section_ids.push(id);\n          }\n          section_ids.sort(footnote_print_comparer);\n\n          place_footnote_definitions_at(state, i + 1, section_ids, 'section');\n          tokens = state.tokens;\n\n          // and reset the tracking set:\n          section_list = new Set();\n        }\n        break;\n      }\n    }\n\n    // Now process the endnotes:\n    {\n      const end_ids = [];\n      for (const id of end_list.values()) {\n        end_ids.push(id);\n      }\n      console.error('@@@@@@@@@@@@@@ ', { end_ids });\n      end_ids.sort(footnote_print_comparer);\n      console.error('@@@@@@@@@@@@@@ after sort', { end_ids });\n\n      place_footnote_definitions_at(state, tokens.length, end_ids, 'end');\n      //tokens = state.tokens;\n    }\n\n    // Update state_block too as we have rewritten & REPLACED the token array earlier in this call:\n    // the reference `state.env.state_block.tokens` is still pointing to the OLD token array!\n    state.env.state_block.tokens = state.tokens;\n  }\n\n  // attach ourselves to the start of block handling too\n  md.block.ruler.before('table', 'footnote_mark_end_of_block', footnote_mark_end_of_block);\n\n  md.block.ruler.before('reference', 'footnote_def', footnote_def, { alt: [ 'paragraph', 'reference' ] });\n  md.inline.ruler.after('image', 'footnote_inline', footnote_inline);\n  md.inline.ruler.after('footnote_inline', 'footnote_ref_with_text', footnote_ref_with_text);\n  md.inline.ruler.after('footnote_ref_with_text', 'footnote_ref', footnote_ref);\n  md.core.ruler.after('inline', 'footnote_tail', footnote_tail);\n}\n"],"names":["anchorFnDefault","n","excludeSubId","tokens","idx","options","env","slf","prefix","docId","length","captionFnDefault","headerFnDefault","state","category","plugin_options","determine_footnote_symbol","info","label","labelOverride","numberSequence","len","slot","Number","isFinite","delta","dupli","remainder","core","str","i","default_plugin_options","anchorFn","captionFn","headerFn","mkLabel","modeOverride","sortOrder","refCombiner","footnote_plugin","md","parseLinkLabel","helpers","isSpace","utils","Object","assign","determine_mode","mode","default_mode","override","includes","fromInput","render_footnote_n","mark","meta","id","assert","ok","subId","render_footnote_mark","token","footnotes","list","render_footnote_anchor_name","render_footnote_anchor_nameRef","render_footnote_caption","bunched_mode_classes","render_footnote_ref","caption","refid","next_token","next_token_meta","bunched_footnote_ref_mode","type","text","render_footnote_block_open","tok","header","markup","sectionId","xhtmlOut","render_footnote_block_close","render_footnote_reference_open","render_footnote_reference_close","render_footnote_mark_end_of_block","render_footnote_open","render_footnote_close","render_footnote_anchor_backref","backrefCount","renderer","rules","footnote_ref","footnote_block_open","footnote_block_close","footnote_reference_open","footnote_reference_close","footnote_mark_end_of_block","footnote_open","footnote_close","footnote_anchor","obtain_footnote_info_slot","at_definition","refs","idMap","idMapCounter","sectionCounter","footnoteId","infoRec","Math","max","content","count","console","find_end_of_block_marker","startIndex","Token","hidden","push","update_end_of_block_marker","parentState","parentIndex","parentTokenIndex","markerTokenIndex","footnote_list","startLine","endLine","silent","footnote_def","oldBMark","oldTShift","oldSCount","oldParentType","pos","initial","offset","ch","posAfterColon","start","bMarks","tShift","eMarks","src","charCodeAt","labelEnd","mode_rec","slice","match","RegExp","$1","$2","sCount","parentType","blkIndent","block","tokenize","footnote_inline","labelStart","posMax","parentEnv","inline","parse","footnote_ref_with_text","footnoteSubId","place_footnote_definitions_at","token_idx","footnote_id_list","inject_tokens","foontnote_spec_list","fn","inject_start_index","children","concat","cnt","error","j","splice","more_footnote_reference_blocks_follow_immediately","footnote_tail","current","insideRef","filter","footnote_print_comparer","idA","idB","reIdMap","sort","infoA","infoB","to_atoms","m","nmr","Infinity","number","labelA","labelB","atomA","atomB","diff","localeCompare","map","compareLabel","prio","aside_list","section_list","Set","section_done_list","end_list","refd_notes_list","footnote","add","has","aside_ids","values","section_ids","end_ids","state_block","ruler","before","alt","after"],"mappings":";;AAAA;AAOA;;AAEA,SAASA,eAAT,CAAyBC,CAAzB,EAA4BC,YAA5B,EAA0CC,MAA1C,EAAkDC,GAAlD,EAAuDC,OAAvD,EAAgEC,GAAhE,EAAqEC,GAArE;AACE,MAAIC,MAAM,GAAG,EAAb;;AACA,MAAI,OAAOF,GAAG,CAACG,KAAX,KAAqB,QAArB,IAAiCH,GAAG,CAACG,KAAJ,CAAUC,MAAV,GAAmB,CAAxD,EAA2D;AACzDF,IAAAA,MAAM,GAAG,MAAMF,GAAG,CAACG,KAAV,GAAkB,GAA3B;AACD;;AACD,SAAOD,MAAM,GAAGP,CAAhB;AACD;;AAED,SAASU,gBAAT,CAA0BV,CAA1B,EAA6BE,MAA7B,EAAqCC,GAArC,EAA0CC,OAA1C,EAAmDC,GAAnD,EAAwDC,GAAxD;AACE;AACA,SAAO,KAAKN,CAAZ;AACD;;AAED,SAASW,eAAT,CAAyBC,KAAzB,EAAgCC,QAAhC,EAA0CR,GAA1C,EAA+CS,cAA/C;AACE,UAAQD,QAAR;AACA,SAAK,OAAL;AACE,aAAO,YAAP;;AAEF,SAAK,SAAL;AACE,aAAO,eAAP;;AAEF,SAAK,KAAL;AACE,aAAO,UAAP;AARF;;AAUA,SAAO,EAAP;AACD;;AAED,SAASE,yBAAT,CAAmCZ,GAAnC,EAAgDa,IAAhD,EAAsDX,GAAtD,EAA2DS,cAA3D;AACE;AACA;AACA;AACA,QAAMG,KAAK,GAAGD,IAAI,CAACE,aAAnB;;AACA,MAAID,KAAJ,EAAW;AACT,WAAOA,KAAP;AACD;;AACD,MAAIH,cAAc,CAACK,cAAf,IAAiC,IAAjC,IAAyCL,cAAc,CAACK,cAAf,CAA8BV,MAA9B,KAAyC,CAAtF,EAAyF;AACvF,WAAO,KAAKN,GAAZ;AACD;;AACD,QAAMiB,GAAG,GAAGN,cAAc,CAACK,cAAf,CAA8BV,MAA1C;;AACA,MAAIN,GAAG,IAAIiB,GAAX,EAAgB;AACd;AACA,UAAMC,IAAI,GAAGP,cAAc,CAACK,cAAf,CAA8BC,GAAG,GAAG,CAApC,CAAb;;AACA,QAAIE,MAAM,CAACC,QAAP,CAAgBF,IAAhB,CAAJ,EAA2B;AACzB,YAAMG,KAAK,GAAGrB,GAAG,GAAGiB,GAAN,GAAY,CAA1B;AACA,aAAO,MAAMC,IAAI,GAAGG,KAAb,CAAP;AACD,KANa;;;AASd,UAAMC,KAAK,GAAItB,GAAG,GAAGiB,GAAP,GAAc,CAA5B,CATc;;AAUd,UAAMM,SAAS,GAAGvB,GAAG,GAAGiB,GAAxB;AACA,UAAMO,IAAI,GAAGb,cAAc,CAACK,cAAf,CAA8BO,SAA9B,CAAb;AACA,QAAIE,GAAG,GAAG,KAAKD,IAAf;;AACA,SAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,KAApB,EAA2BI,CAAC,EAA5B,EAAgC;AAC9BD,MAAAA,GAAG,IAAID,IAAP;AACD;;AACD,WAAOC,GAAP;AACD;;AAED,SAAO,KAAKd,cAAc,CAACK,cAAf,CAA8BhB,GAA9B,CAAZ;AACD;AAKD;;;;;;;;;;;;;;;;;;;;AAmBA,MAAM2B,sBAAsB,GAAG;AAC7B;AAEAC,EAAAA,QAAQ,EAAEhC,eAHmB;AAI7BiC,EAAAA,SAAS,EAAEtB,gBAJkB;AAK7BuB,EAAAA,QAAQ,EAAEtB,eALmB;AAM7BuB,EAAAA,OAAO,EAAEnB,yBANoB;AAQ7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAI,EAAAA,cAAc,EAAE,CAAE,GAAF,EAAO,GAAP,EAAY,IAAZ,EAAkB,IAAlB,EAAwB,GAAxB,EAA6B,CAA7B,CAvBa;AAyB7B;AACA;AACA;AACA;AACA;AACA;AACA;AACAgB,EAAAA,YAAY,EAAE,IAhCe;AAkC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAC,EAAAA,SAAS,EAAE,CApDkB;AAsD7B;AACAC,EAAAA,WAAW,EAAE;AAvDgB,CAA/B;SA0DwBC,gBAAgBC,IAAIzB;AAC1C,QAAM0B,cAAc,GAAGD,EAAE,CAACE,OAAH,CAAWD,cAAlC;AAAA,QACME,OAAO,GAAGH,EAAE,CAACI,KAAH,CAASD,OADzB;AAGA5B,EAAAA,cAAc,GAAG8B,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkB/B,cAAlB,EAAkCgB,sBAAlC,CAAjB;;AAEA,WAASgB,cAAT,CAAwBC,IAAxB,EAAsCC,YAAtC;AACE,QAAIC,QAAQ,GAAG,IAAf;;AACA,QAAInC,cAAc,CAACqB,YAAf,IAA+B,MAAMe,QAAN,CAAepC,cAAc,CAACqB,YAA9B,CAAnC,EAAgF;AAC9Ec,MAAAA,QAAQ,GAAGnC,cAAc,CAACqB,YAA1B;AACD;;AACD,QAAI,MAAMe,QAAN,CAAeH,IAAf,CAAJ,EAA0B;AACxB,aAAO;AACLA,QAAAA,IAAI,EAAEE,QAAQ,IAAIF,IADb;AAELI,QAAAA,SAAS,EAAE;AAFN,OAAP;AAID;;AACD,WAAO;AACLJ,MAAAA,IAAI,EAAEE,QAAQ,IAAID,YADb;AAELG,MAAAA,SAAS,EAAE;AAFN,KAAP;AAID;;AAED,WAASC,iBAAT,CAA2BlD,MAA3B,EAAmCC,GAAnC,EAAwCF,YAAxC;AACE,UAAMoD,IAAI,GAAGnD,MAAM,CAACC,GAAD,CAAN,CAAYmD,IAAZ,CAAiBC,EAA9B;AACAC,IAAAA,MAAM,CAACC,EAAP,CAAUnC,MAAM,CAACC,QAAP,CAAgB8B,IAAhB,CAAV;AACAG,IAAAA,MAAM,CAACC,EAAP,CAAUJ,IAAI,GAAG,CAAjB;AACA,QAAIrD,CAAC,GAAG,KAAKqD,IAAb;;AACAG,IAAAA,MAAM,CAACC,EAAP,CAAUzD,CAAC,CAACS,MAAF,GAAW,CAArB;;AAEA,QAAI,CAACR,YAAD,IAAiBC,MAAM,CAACC,GAAD,CAAN,CAAYmD,IAAZ,CAAiBI,KAAjB,GAAyB,CAA9C,EAAiD;AAC/C1D,MAAAA,CAAC,IAAI,MAAME,MAAM,CAACC,GAAD,CAAN,CAAYmD,IAAZ,CAAiBI,KAA5B;AACD;;AAED,WAAO1D,CAAP;AACD;;AAED,WAAS2D,oBAAT,CAA8BzD,MAA9B,EAAsCC,GAAtC,EAA2CE,GAA3C;AACE,UAAMuD,KAAK,GAAG1D,MAAM,CAACC,GAAD,CAApB;AACAqD,IAAAA,MAAM,CAACC,EAAP,CAAUG,KAAK,IAAI,IAAnB;AACA,UAAM5C,IAAI,GAAGX,GAAG,CAACwD,SAAJ,CAAcC,IAAd,CAAmBF,KAAK,CAACN,IAAN,CAAWC,EAA9B,CAAb;AACAC,IAAAA,MAAM,CAACC,EAAP,CAAUzC,IAAI,IAAI,IAAlB;AACA,UAAMqC,IAAI,GAAWvC,cAAc,CAACoB,OAAf,CAAuB0B,KAAK,CAACN,IAAN,CAAWC,EAAlC,EAAsCvC,IAAtC,EAA4CX,GAA5C,EAAiDS,cAAjD,CAArB;AACA0C,IAAAA,MAAM,CAACC,EAAP,CAAUJ,IAAI,CAAC5C,MAAL,GAAc,CAAxB;AACA,WAAO4C,IAAP;AACD;;AAED,WAASU,2BAAT,CAAqC7D,MAArC,EAA6CC,GAA7C,EAAkDC,OAAlD,EAA2DC,GAA3D,EAAgEC,GAAhE;AACE,UAAMN,CAAC,GAAGoD,iBAAiB,CAAClD,MAAD,EAASC,GAAT,EAAc,IAAd,CAA3B;AACA,WAAOW,cAAc,CAACiB,QAAf,CAAwB/B,CAAxB,EAA2B,IAA3B,EAAiCE,MAAjC,EAAyCC,GAAzC,EAA8CC,OAA9C,EAAuDC,GAAvD,EAA4DC,GAA5D,CAAP;AACD;;AAED,WAAS0D,8BAAT,CAAwC9D,MAAxC,EAAgDC,GAAhD,EAAqDC,OAArD,EAA8DC,GAA9D,EAAmEC,GAAnE;AACE,UAAMN,CAAC,GAAGoD,iBAAiB,CAAClD,MAAD,EAASC,GAAT,EAAc,KAAd,CAA3B;AACA,WAAOW,cAAc,CAACiB,QAAf,CAAwB/B,CAAxB,EAA2B,KAA3B,EAAkCE,MAAlC,EAA0CC,GAA1C,EAA+CC,OAA/C,EAAwDC,GAAxD,EAA6DC,GAA7D,CAAP;AACD;;AAED,WAAS2D,uBAAT,CAAiC/D,MAAjC,EAAyCC,GAAzC,EAA8CC,OAA9C,EAAuDC,GAAvD,EAA4DC,GAA5D;AACE,UAAMN,CAAC,GAAG2D,oBAAoB,CAACzD,MAAD,EAASC,GAAT,EAAcE,GAAd,CAA9B;AACA,WAAOS,cAAc,CAACkB,SAAf,CAAyBhC,CAAzB,EAA4BE,MAA5B,EAAoCC,GAApC,EAAyCC,OAAzC,EAAkDC,GAAlD,EAAuDC,GAAvD,CAAP;AACD;;AAED,QAAM4D,oBAAoB,GAAG,CAAE,EAAF,EAAM,0BAAN,EAAkC,2BAAlC,CAA7B;;AAEA,WAASC,mBAAT,CAA6BjE,MAA7B,EAAqCC,GAArC,EAA0CC,OAA1C,EAAmDC,GAAnD,EAAwDC,GAAxD;AACE,UAAMiD,EAAE,GAAQQ,2BAA2B,CAAC7D,MAAD,EAASC,GAAT,EAAcC,OAAd,EAAuBC,GAAvB,EAA4BC,GAA5B,CAA3C;AACA,UAAM8D,OAAO,GAAGH,uBAAuB,CAAC/D,MAAD,EAASC,GAAT,EAAcC,OAAd,EAAuBC,GAAvB,EAA4BC,GAA5B,CAAvC;AACA,UAAM+D,KAAK,GAAKL,8BAA8B,CAAC9D,MAAD,EAASC,GAAT,EAAcC,OAAd,EAAuBC,GAAvB,EAA4BC,GAA5B,CAA9C;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,UAAMgE,UAAU,GAAGpE,MAAM,CAACC,GAAG,GAAG,CAAP,CAAN,IAAmB,EAAtC;AACA,UAAMoE,eAAe,GAAGD,UAAU,CAAChB,IAAX,IAAmB,EAA3C;AACA,UAAMkB,yBAAyB,GAAIF,UAAU,CAACG,IAAX,KAAoB,cAApB,GAAqC,CAACF,eAAe,CAACG,IAAjB,GAAwB,CAAxB,GAA4B,CAAjE,GAAqE,CAAxG;AAEA,qCAAkCR,oBAAoB,CAACM,yBAAD,eAA2CjB,gBAAkBc,UAAYnE,MAAM,CAACC,GAAD,CAAN,CAAYmD,IAAZ,CAAiBoB,IAAjB,IAAyB,+BAAiCN,mBAAlL,IACJI,yBAAyB,KAAK,CAA9B,wCAAwEN,oBAAoB,CAACM,yBAAD,MAAkC1D,cAAc,CAACuB,mBAA7I,GAAoK,EADhK,CAAP;AAED;;AAED,WAASsC,0BAAT,CAAoCzE,MAApC,EAA4CC,GAA5C,EAAiDC,OAAjD;AACE,UAAMwE,GAAG,GAAG1E,MAAM,CAACC,GAAD,CAAlB;AACAqD,IAAAA,MAAM,CAACoB,GAAG,IAAI,IAAR,CAAN;AACApB,IAAAA,MAAM,CAACoB,GAAG,CAACtB,IAAJ,IAAY,IAAb,CAAN;AACA,UAAMuB,MAAM,GAAID,GAAG,CAACE,MAAJ,mCAA8CF,GAAG,CAACE,aAAlD,GAAmE,EAAnF;AACA,UAAMjE,QAAQ,GAAG+D,GAAG,CAACtB,IAAJ,CAASzC,QAA1B;AACA,0DAAuDA,8BAAgC+D,GAAG,CAACtB,IAAJ,CAASyB,aAAe3E,OAAO,CAAC4E,QAAR,GAAmB,IAAnB,GAA0B,iDAAmDnE,2BAA6B+D,GAAG,CAACtB,IAAJ,CAASyB,cAAgBF,qCAAlP;AACD;;AAED,WAASI,2BAAT,CAAqC/E,MAArC,EAA6CC,GAA7C,EAAkDC,OAAlD;AACE,WAAO,mBAAP;AACD;;AAED,WAAS8E,8BAAT,CAAwChF,MAAxC,EAAgDC,GAAhD,EAAqDC,OAArD;AACE,WAAO,qCAAP;AACD;;AAED,WAAS+E,+BAAT;AACE,WAAO,mCAAP;AACD;;AAED,WAASC,iCAAT;AACE,WAAO,iCAAP;AACD;;AAED,WAASC,oBAAT,CAA8BnF,MAA9B,EAAsCC,GAAtC,EAA2CC,OAA3C,EAAoDC,GAApD,EAAyDC,GAAzD;AACE,UAAMiD,EAAE,GAAGQ,2BAA2B,CAAC7D,MAAD,EAASC,GAAT,EAAcC,OAAd,EAAuBC,GAAvB,EAA4BC,GAA5B,CAAtC;AACA,UAAM8D,OAAO,GAAGH,uBAAuB,CAAC/D,MAAD,EAASC,GAAT,EAAcC,OAAd,EAAuBC,GAAvB,EAA4BC,GAA5B,CAAvC;AAGA;AACA;;AACA,sCAAmCiD,oDAAsDa,yEAA2EA,qDAApK;AACD;;AAED,WAASkB,qBAAT;AACE,WAAO,gBAAP;AACD;;AAED,WAASC,8BAAT,CAAwCrF,MAAxC,EAAgDC,GAAhD,EAAqDC,OAArD,EAA8DC,GAA9D,EAAmEC,GAAnE;AACE,UAAMsE,GAAG,GAAG1E,MAAM,CAACC,GAAD,CAAlB;AACAqD,IAAAA,MAAM,CAACoB,GAAG,IAAI,IAAR,CAAN;AACApB,IAAAA,MAAM,CAACoB,GAAG,CAACtB,IAAJ,IAAY,IAAb,CAAN;AACA,QAAIe,KAAK,GAAGjB,iBAAiB,CAAClD,MAAD,EAASC,GAAT,EAAc,KAAd,CAA7B;AACAkE,IAAAA,KAAK,GAAGvD,cAAc,CAACiB,QAAf,CAAwBsC,KAAxB,EAA+B,KAA/B,EAAsCnE,MAAtC,EAA8CC,GAA9C,EAAmDC,OAAnD,EAA4DC,GAA5D,EAAiEC,GAAjE,CAAR;AAEA;;AACA,8BAA2B+D,mDAAqDO,GAAG,CAACtB,IAAJ,CAASI,2BAA6BkB,GAAG,CAACtB,IAAJ,CAASkC,YAAT,GAAwBZ,GAAG,CAACtB,IAAJ,CAASI,KAAjC,GAAyC,qBAA/J;AACD;;AAGDnB,EAAAA,EAAE,CAACkD,QAAH,CAAYC,KAAZ,CAAkBC,YAAlB,GAA0CxB,mBAA1C;AACA5B,EAAAA,EAAE,CAACkD,QAAH,CAAYC,KAAZ,CAAkBE,mBAAlB,GAA0CjB,0BAA1C;AACApC,EAAAA,EAAE,CAACkD,QAAH,CAAYC,KAAZ,CAAkBG,oBAAlB,GAA0CZ,2BAA1C;AACA1C,EAAAA,EAAE,CAACkD,QAAH,CAAYC,KAAZ,CAAkBI,uBAAlB,GAA8CZ,8BAA9C;AACA3C,EAAAA,EAAE,CAACkD,QAAH,CAAYC,KAAZ,CAAkBK,wBAAlB,GAA8CZ,+BAA9C;AACA5C,EAAAA,EAAE,CAACkD,QAAH,CAAYC,KAAZ,CAAkBM,0BAAlB,GAA+CZ,iCAA/C;AACA7C,EAAAA,EAAE,CAACkD,QAAH,CAAYC,KAAZ,CAAkBO,aAAlB,GAA0CZ,oBAA1C;AACA9C,EAAAA,EAAE,CAACkD,QAAH,CAAYC,KAAZ,CAAkBQ,cAAlB,GAA0CZ,qBAA1C;AACA/C,EAAAA,EAAE,CAACkD,QAAH,CAAYC,KAAZ,CAAkBS,eAAlB,GAA0CZ,8BAA1C;;AAEA,WAASa,yBAAT,CAAmC/F,GAAnC,EAAwCY,KAAxC,EAA4DoF,aAA5D;AACE,QAAI,CAAChG,GAAG,CAACwD,SAAT,EAAoB;AAClBxD,MAAAA,GAAG,CAACwD,SAAJ,GAAgB;AACd;AACAyC,QAAAA,IAAI,EAAE,EAFQ;AAGd;AACAxC,QAAAA,IAAI,EAAE,EAJQ;AAKd;AACAyC,QAAAA,KAAK,EAAE,CAAE,CAAF,CANO;AAOdC,QAAAA,YAAY,EAAE,CAPA;AASd;AACA;AACAC,QAAAA,cAAc,EAAE;AAXF,OAAhB;AAaD;AAID;;;AACA,QAAIC,UAAJ;AACA,QAAIC,OAAJ;;AAEA,QAAI1F,KAAK,IAAI,IAAT,IAAiB,CAACZ,GAAG,CAACwD,SAAJ,CAAcyC,IAAd,CAAmB,MAAMrF,KAAzB,CAAtB,EAAuD;AACrDyF,MAAAA,UAAU,GAAGE,IAAI,CAACC,GAAL,CAAS,CAAT,EAAYxG,GAAG,CAACwD,SAAJ,CAAcC,IAAd,CAAmBrD,MAA/B,CAAb;AACAkG,MAAAA,OAAO,GAAG;AACRpD,QAAAA,EAAE,EAAEmD,UADI;AAERzF,QAAAA,KAFQ;AAGRC,QAAAA,aAAa,EAAE,IAHP;AAIR6B,QAAAA,IAAI,EAAE,IAJE;AAKR+D,QAAAA,OAAO,EAAE,IALD;AAMR5G,QAAAA,MAAM,EAAE,IANA;AAOR6G,QAAAA,KAAK,EAAE;AAPC,OAAV;AASA1G,MAAAA,GAAG,CAACwD,SAAJ,CAAcC,IAAd,CAAmB4C,UAAnB,IAAiCC,OAAjC;;AACA,UAAI1F,KAAK,IAAI,IAAb,EAAmB;AACjBZ,QAAAA,GAAG,CAACwD,SAAJ,CAAcyC,IAAd,CAAmB,MAAMrF,KAAzB,IAAkCyF,UAAlC;AACD;AACF,KAfD,MAeO;AACLA,MAAAA,UAAU,GAAGrG,GAAG,CAACwD,SAAJ,CAAcyC,IAAd,CAAmB,MAAMrF,KAAzB,CAAb;AACA0F,MAAAA,OAAO,GAAGtG,GAAG,CAACwD,SAAJ,CAAcC,IAAd,CAAmB4C,UAAnB,CAAV;AACAM,MAAAA,OAAO,CAACxD,MAAR,CAAe,CAAC,CAACmD,OAAjB,EAA0B,uCAA1B;AACD;;AAED,UAAMJ,KAAK,GAAGlG,GAAG,CAACwD,SAAJ,CAAc0C,KAA5B;AAGA;;AACA,YAAQzF,cAAc,CAACsB,SAAvB;AACA;AACA;AACA,WAAK,CAAL;AACE;AACA,YAAI,CAACmE,KAAK,CAACG,UAAD,CAAV,EAAwB;AACtBH,UAAAA,KAAK,CAACG,UAAD,CAAL,GAAoB,EAAErG,GAAG,CAACwD,SAAJ,CAAc2C,YAApC;AACD;;AACD;AAEF;;AACA,WAAK,CAAL;AACE,YAAI,CAACH,aAAD,IAAkB,CAACE,KAAK,CAACG,UAAD,CAA5B,EAA0C;AACxC;AACAH,UAAAA,KAAK,CAACG,UAAD,CAAL,GAAoB,EAAErG,GAAG,CAACwD,SAAJ,CAAc2C,YAApC;AACD;;AACD;AAEF;;AACA,WAAK,CAAL;AACE,YAAIH,aAAa,IAAI,CAACE,KAAK,CAACG,UAAD,CAA3B,EAAyC;AACvC;AACAH,UAAAA,KAAK,CAACG,UAAD,CAAL,GAAoB,EAAErG,GAAG,CAACwD,SAAJ,CAAc2C,YAApC;AACD;;AACD;AAEF;;AACA,WAAK,CAAL;AACE;AACA;AACA;AACA;AA/BF;;AAkCA,WAAOG,OAAP;AACD;;AAED,WAASM,wBAAT,CAAkCrG,KAAlC,EAAyCsG,UAAzC;AACE,QAAI/G,GAAJ,EAASiB,GAAT;AACA,UAAMlB,MAAM,GAAGU,KAAK,CAACV,MAArB;;AACA,SAAKC,GAAG,GAAG+G,UAAN,EAAkB9F,GAAG,GAAGlB,MAAM,CAACO,MAApC,EAA4CN,GAAG,GAAGiB,GAAlD,EAAuDjB,GAAG,EAA1D,EAA8D;AAC5D,UAAID,MAAM,CAACC,GAAD,CAAN,CAAYsE,IAAZ,KAAqB,4BAAzB,EAAuD;AAAE,eAAOtE,GAAP;AAAa;AACvE;AAED;AAEA;AACA;AACA;;;AACA,UAAMyD,KAAK,GAAG,IAAIhD,KAAK,CAACuG,KAAV,CAAgB,4BAAhB,EAA8C,EAA9C,EAAkD,CAAlD,CAAd;AACAvD,IAAAA,KAAK,CAACwD,MAAN,GAAe,IAAf;AAEA;AACA;;AACAlH,IAAAA,MAAM,CAACmH,IAAP,CAAYzD,KAAZ;AACA,WAAO1D,MAAM,CAACO,MAAP,GAAgB,CAAvB;AACD;;AAED,WAAS6G,0BAAT,CAAoC1G,KAApC,EAA2C8F,UAA3C;AACE;AACA;AACA;AACA,UAAMa,WAAW,GAAG3G,KAAK,CAACP,GAAN,CAAUkH,WAA9B;AACA,UAAMC,WAAW,GAAG5G,KAAK,CAACP,GAAN,CAAUoH,gBAA9B;AACA,UAAMC,gBAAgB,GAAGT,wBAAwB,CAACM,WAAD,EAAcC,WAAW,GAAG,CAA5B,CAAjD;AACA,UAAM5D,KAAK,GAAG2D,WAAW,CAACrH,MAAZ,CAAmBwH,gBAAnB,CAAd;;AACA,QAAI,CAAC9D,KAAK,CAACN,IAAX,EAAiB;AACfM,MAAAA,KAAK,CAACN,IAAN,GAAa;AACXqE,QAAAA,aAAa,EAAE;AADJ,OAAb;AAGD;;AACD/D,IAAAA,KAAK,CAACN,IAAN,CAAWqE,aAAX,CAAyBN,IAAzB,CAA8BX,UAA9B;AACD;;;AAGD,WAASV,0BAAT,CAAoCpF,KAApC,EAA2CgH,SAA3C,EAAsDC,OAAtD,EAA+DC,MAA/D;AACE,QAAI,CAACA,MAAD,IAAWlH,KAAK,CAACV,MAAN,CAAaO,MAAb,GAAsB,CAArC,EAAwC;AACtC,YAAMmD,KAAK,GAAGhD,KAAK,CAACyG,IAAN,CAAW,4BAAX,EAAyC,EAAzC,EAA6C,CAA7C,CAAd;AACAzD,MAAAA,KAAK,CAACwD,MAAN,GAAe,IAAf;AACD;;AACD,WAAO,KAAP;AACD;;;AAGD,WAASW,YAAT,CAAsBnH,KAAtB,EAA6BgH,SAA7B,EAAwCC,OAAxC,EAAiDC,MAAjD;AACE,QAAIE,QAAJ;AAAA,QAAcC,SAAd;AAAA,QAAyBC,SAAzB;AAAA,QAAoCC,aAApC;AAAA,QAAmDC,GAAnD;AAAA,QAAwDnH,KAAxD;AAAA,QAA+D2C,KAA/D;AAAA,QACIyE,OADJ;AAAA,QACaC,MADb;AAAA,QACqBC,EADrB;AAAA,QACyBC,aADzB;AAAA,QAEIC,KAAK,GAAG7H,KAAK,CAAC8H,MAAN,CAAad,SAAb,IAA0BhH,KAAK,CAAC+H,MAAN,CAAaf,SAAb,CAFtC;AAAA,QAGIf,GAAG,GAAGjG,KAAK,CAACgI,MAAN,CAAahB,SAAb,CAHV;;AAMA,QAAIa,KAAK,GAAG,CAAR,GAAY5B,GAAhB,EAAqB;AAAE,aAAO,KAAP;AAAe;;AAEtC,QAAIjG,KAAK,CAACiI,GAAN,CAAUC,UAAV,CAAqBL,KAArB,MAAgC;AAAI;AAAxC,MAAiD;AAAE,eAAO,KAAP;AAAe;;AAClE,QAAI7H,KAAK,CAACiI,GAAN,CAAUC,UAAV,CAAqBL,KAAK,GAAG,CAA7B,MAAoC;AAAI;AAA5C,MAAqD;AAAE,eAAO,KAAP;AAAe;;AAEtE,SAAKL,GAAG,GAAGK,KAAK,GAAG,CAAnB,EAAsBL,GAAG,GAAGvB,GAA5B,EAAiCuB,GAAG,EAApC,EAAwC;AACtC,UAAIxH,KAAK,CAACiI,GAAN,CAAUC,UAAV,CAAqBV,GAArB,MAA8B;AAAK;AAAvC,QAAiD;AAAE,iBAAO,KAAP;AAAe;;AAClE,UAAIxH,KAAK,CAACiI,GAAN,CAAUC,UAAV,CAAqBV,GAArB,MAA8B;AAAK;AAAvC,QAAgD;AAC9C;AACD;AACF;;AACD,UAAMW,QAAQ,GAAGX,GAAjB;;AAEA,QAAIA,GAAG,KAAKK,KAAK,GAAG,CAApB,EAAuB;AAAE,aAAO,KAAP;AAAe;;;AACxC,QAAIL,GAAG,GAAG,CAAN,IAAWvB,GAAX,IAAkBjG,KAAK,CAACiI,GAAN,CAAUC,UAAV,CAAqB,EAAEV,GAAvB,MAAgC;AAAK;AAA3D,MAAoE;AAAE,eAAO,KAAP;AAAe;;AAErF,UAAMY,QAAQ,GAAGlG,cAAc,CAAClC,KAAK,CAACiI,GAAN,CAAUT,GAAG,GAAG,CAAhB,CAAD,EAAqB,GAArB,CAA/B;;AACA,QAAIY,QAAQ,CAAC7F,SAAb,EAAwB;AAAEiF,MAAAA,GAAG;AAAK;;AAClC,UAAMrF,IAAI,GAAGiG,QAAQ,CAACjG,IAAtB;;AAEA,QAAIqF,GAAG,GAAG,CAAN,IAAWvB,GAAX,IAAkBjG,KAAK,CAACiI,GAAN,CAAUC,UAAV,CAAqB,EAAEV,GAAvB,MAAgC;AAAK;AAA3D,MAAwE;AAAE,eAAO,KAAP;AAAe;;AACzF,QAAIN,MAAJ,EAAY;AAAE,aAAO,IAAP;AAAc;;AAC5BM,IAAAA,GAAG;AAEHnH,IAAAA,KAAK,GAAGL,KAAK,CAACiI,GAAN,CAAUI,KAAV,CAAgBR,KAAK,GAAG,CAAxB,EAA2BM,QAA3B,CAAR;AACA,QAAIrE,IAAJ;;AACA,QAAIzD,KAAK,CAACiI,KAAN,CAAY,gBAAZ,CAAJ,EAAmC;AACjCjI,MAAAA,KAAK,GAAGkI,MAAM,CAACC,EAAf;AACA1E,MAAAA,IAAI,GAAGyE,MAAM,CAACE,EAAd;AACD;AAID;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,UAAM1C,OAAO,GAAGP,yBAAyB,CAACxF,KAAK,CAACP,GAAP,EAAYY,KAAZ,EAAmB,IAAnB,CAAzC;AAEA0F,IAAAA,OAAO,CAACzF,aAAR,GAAwBwD,IAAxB;AACAiC,IAAAA,OAAO,CAAC5D,IAAR,GAAeA,IAAf;AAEAa,IAAAA,KAAK,GAAGhD,KAAK,CAACyG,IAAN,CAAW,yBAAX,EAAsC,EAAtC,EAA0C,CAA1C,CAAR;AACAzD,IAAAA,KAAK,CAACN,IAAN,GAAa;AACXC,MAAAA,EAAE,EAAEoD,OAAO,CAACpD;AADD,KAAb;AAGAK,IAAAA,KAAK,CAACwD,MAAN,GAAe,IAAf;AAEAY,IAAAA,QAAQ,GAAGpH,KAAK,CAAC8H,MAAN,CAAad,SAAb,CAAX;AACAK,IAAAA,SAAS,GAAGrH,KAAK,CAAC+H,MAAN,CAAaf,SAAb,CAAZ;AACAM,IAAAA,SAAS,GAAGtH,KAAK,CAAC0I,MAAN,CAAa1B,SAAb,CAAZ;AACAO,IAAAA,aAAa,GAAGvH,KAAK,CAAC2I,UAAtB;AAEAf,IAAAA,aAAa,GAAGJ,GAAhB;AACAC,IAAAA,OAAO,GAAGC,MAAM,GAAG1H,KAAK,CAAC0I,MAAN,CAAa1B,SAAb,IAA0BQ,GAA1B,IAAiCxH,KAAK,CAAC8H,MAAN,CAAad,SAAb,IAA0BhH,KAAK,CAAC+H,MAAN,CAAaf,SAAb,CAA3D,CAAnB;;AAEA,WAAOQ,GAAG,GAAGvB,GAAb,EAAkB;AAChB0B,MAAAA,EAAE,GAAG3H,KAAK,CAACiI,GAAN,CAAUC,UAAV,CAAqBV,GAArB,CAAL;;AAEA,UAAI1F,OAAO,CAAC6F,EAAD,CAAX,EAAiB;AACf,YAAIA,EAAE,KAAK,IAAX,EAAiB;AACfD,UAAAA,MAAM,IAAI,IAAIA,MAAM,GAAG,CAAvB;AACD,SAFD,MAEO;AACLA,UAAAA,MAAM;AACP;AACF,OAND,MAMO;AACL;AACD;;AAEDF,MAAAA,GAAG;AACJ;;AAEDxH,IAAAA,KAAK,CAAC+H,MAAN,CAAaf,SAAb,IAA0BQ,GAAG,GAAGI,aAAhC;AACA5H,IAAAA,KAAK,CAAC0I,MAAN,CAAa1B,SAAb,IAA0BU,MAAM,GAAGD,OAAnC;AAEAzH,IAAAA,KAAK,CAAC8H,MAAN,CAAad,SAAb,IAA0BY,aAA1B;AACA5H,IAAAA,KAAK,CAAC4I,SAAN,IAAmB,CAAnB;AACA5I,IAAAA,KAAK,CAAC2I,UAAN,GAAmB,UAAnB;;AAEA,QAAI3I,KAAK,CAAC0I,MAAN,CAAa1B,SAAb,IAA0BhH,KAAK,CAAC4I,SAApC,EAA+C;AAC7C5I,MAAAA,KAAK,CAAC0I,MAAN,CAAa1B,SAAb,KAA2BhH,KAAK,CAAC4I,SAAjC;AACD;;AAED5I,IAAAA,KAAK,CAAC2B,EAAN,CAASkH,KAAT,CAAeC,QAAf,CAAwB9I,KAAxB,EAA+BgH,SAA/B,EAA0CC,OAA1C,EAAmD,IAAnD;AAEAjH,IAAAA,KAAK,CAAC2I,UAAN,GAAmBpB,aAAnB;AACAvH,IAAAA,KAAK,CAAC4I,SAAN,IAAmB,CAAnB;AACA5I,IAAAA,KAAK,CAAC+H,MAAN,CAAaf,SAAb,IAA0BK,SAA1B;AACArH,IAAAA,KAAK,CAAC0I,MAAN,CAAa1B,SAAb,IAA0BM,SAA1B;AACAtH,IAAAA,KAAK,CAAC8H,MAAN,CAAad,SAAb,IAA0BI,QAA1B;AAEApE,IAAAA,KAAK,GAAGhD,KAAK,CAACyG,IAAN,CAAW,0BAAX,EAAuC,EAAvC,EAA2C,CAAC,CAA5C,CAAR;AACAzD,IAAAA,KAAK,CAACN,IAAN,GAAa;AACXC,MAAAA,EAAE,EAAEoD,OAAO,CAACpD;AADD,KAAb;AAIA,WAAO,IAAP;AACD;;;AAGD,WAASoG,eAAT,CAAyB/I,KAAzB,EAAgCkH,MAAhC;AACE,QAAI8B,UAAJ;AAAA,QACIb,QADJ;AAAA,QAEInF,KAFJ;AAAA,QAGI1D,MAHJ;AAAA,QAII2G,GAAG,GAAGjG,KAAK,CAACiJ,MAJhB;AAAA,QAKIpB,KAAK,GAAG7H,KAAK,CAACwH,GALlB;;AAOA,QAAIK,KAAK,GAAG,CAAR,IAAa5B,GAAjB,EAAsB;AAAE,aAAO,KAAP;AAAe;;AACvC,QAAIjG,KAAK,CAACiI,GAAN,CAAUC,UAAV,CAAqBL,KAArB,MAAgC;AAAI;AAAxC,MAAiD;AAAE,eAAO,KAAP;AAAe;;AAClE,QAAI7H,KAAK,CAACiI,GAAN,CAAUC,UAAV,CAAqBL,KAAK,GAAG,CAA7B,MAAoC;AAAI;AAA5C,MAAqD;AAAE,eAAO,KAAP;AAAe;;AAEtEmB,IAAAA,UAAU,GAAGnB,KAAK,GAAG,CAArB;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,UAAMO,QAAQ,GAAGlG,cAAc,CAAClC,KAAK,CAACiI,GAAN,CAAUJ,KAAK,GAAG,CAAlB,CAAD,EAAuB,GAAvB,CAA/B;;AACA,QAAIO,QAAQ,CAAC7F,SAAb,EAAwB;AACtByG,MAAAA,UAAU;AACX;;AACD,UAAM7G,IAAI,GAAGiG,QAAQ,CAACjG,IAAtB;AAEAgG,IAAAA,QAAQ,GAAGvG,cAAc,CAAC5B,KAAD,EAAQ6H,KAAK,GAAG,CAAhB,CAAzB;;AAGA,QAAIM,QAAQ,GAAG,CAAf,EAAkB;AAAE,aAAO,KAAP;AAAe;AAGnC;AACA;;;AACA,QAAI,CAACjB,MAAL,EAAa;AACX;AACA;AACA;AACA;AACA,YAAMP,WAAW,GAAG3G,KAAK,CAACP,GAAN,CAAUkH,WAA9B;AACA,YAAMuC,SAAS,GAAGvC,WAAW,CAAClH,GAA9B,CANW;AASX;;AACA,YAAMsG,OAAO,GAAGP,yBAAyB,CAAC0D,SAAD,EAAY,IAAZ,EAAkB,IAAlB,CAAzC;AACAnD,MAAAA,OAAO,CAAC5D,IAAR,GAAeA,IAAf;AACA4D,MAAAA,OAAO,CAACI,KAAR;AAEAnD,MAAAA,KAAK,GAAGhD,KAAK,CAACyG,IAAN,CAAW,cAAX,EAA2B,EAA3B,EAA+B,CAA/B,CAAR,CAdW;;AAgBXzD,MAAAA,KAAK,CAACN,IAAN,GAAa;AACXC,QAAAA,EAAE,EAAEoD,OAAO,CAACpD;AADD,OAAb;AAIA3C,MAAAA,KAAK,CAAC2B,EAAN,CAASwH,MAAT,CAAgBC,KAAhB,CACEpJ,KAAK,CAACiI,GAAN,CAAUI,KAAV,CAAgBW,UAAhB,EAA4Bb,QAA5B,CADF,EAEEnI,KAAK,CAAC2B,EAFR,EAGE3B,KAAK,CAACP,GAHR,EAIEH,MAAM,GAAG,EAJX,EApBW;;AA4BXyG,MAAAA,OAAO,CAACG,OAAR,GAAkBlG,KAAK,CAACiI,GAAN,CAAUI,KAAV,CAAgBW,UAAhB,EAA4Bb,QAA5B,CAAlB;AACApC,MAAAA,OAAO,CAACzG,MAAR,GAAiBA,MAAjB,CA7BW;AAgCX;AACA;;AACAoH,MAAAA,0BAA0B,CAAC1G,KAAD,EAAQ+F,OAAO,CAACpD,EAAhB,CAA1B,CAlCW;AAqCZ;;AAED3C,IAAAA,KAAK,CAACwH,GAAN,GAAYW,QAAQ,GAAG,CAAvB;AACAnI,IAAAA,KAAK,CAACiJ,MAAN,GAAehD,GAAf;AACA,WAAO,IAAP;AACD;;;AAGD,WAASoD,sBAAT,CAAgCrJ,KAAhC,EAAuCkH,MAAvC;AACE,QAAI7G,KAAJ;AAAA,QACImH,GADJ;AAAA,QAEI8B,aAFJ;AAAA,QAGItG,KAHJ;AAAA,QAIIiD,GAAG,GAAGjG,KAAK,CAACiJ,MAJhB;AAAA,QAKIpB,KAAK,GAAG7H,KAAK,CAACwH,GALlB;;AAQA,QAAIK,KAAK,GAAG,CAAR,GAAY5B,GAAhB,EAAqB;AAAE,aAAO,KAAP;AAAe;;AAEtC,QAAIjG,KAAK,CAACiI,GAAN,CAAUC,UAAV,CAAqBL,KAArB,MAAgC;AAAI;AAAxC,MAAiD;AAAE,eAAO,KAAP;AAAe;;AAClE,QAAI7H,KAAK,CAACiI,GAAN,CAAUC,UAAV,CAAqBL,KAAK,GAAG,CAA7B,MAAoC;AAAI;AAA5C,MAAqD;AAAE,eAAO,KAAP;AAAe;;AAEtE,SAAKL,GAAG,GAAGK,KAAK,GAAG,CAAnB,EAAsBL,GAAG,GAAGvB,GAA5B,EAAiCuB,GAAG,EAApC,EAAwC;AACtC,UAAIxH,KAAK,CAACiI,GAAN,CAAUC,UAAV,CAAqBV,GAArB,MAA8B;AAAK;AAAvC,QAAuD;AAAE,iBAAO,KAAP;AAAe;;AACxE,UAAIxH,KAAK,CAACiI,GAAN,CAAUC,UAAV,CAAqBV,GAArB,MAA8B;AAAK;AAAvC,QAAgD;AAC9C;AACD;AACF;;AAED,QAAIA,GAAG,KAAKK,KAAK,GAAG,CAApB,EAAuB;AAAE,aAAO,KAAP;AAAe;;;AACxC,QAAIL,GAAG,IAAIvB,GAAX,EAAgB;AAAE,aAAO,KAAP;AAAe;;AACjCuB,IAAAA,GAAG;AAEHnH,IAAAA,KAAK,GAAGL,KAAK,CAACiI,GAAN,CAAUI,KAAV,CAAgBR,KAAK,GAAG,CAAxB,EAA2BL,GAAG,GAAG,CAAjC,CAAR;;AACA,QAAI,CAACnH,KAAD,IAAU,CAACA,KAAK,CAACiI,KAAN,CAAY,gBAAZ,CAAf,EAA8C;AAAE,aAAO,KAAP;AAAe;;AAC/DjI,IAAAA,KAAK,GAAGkI,MAAM,CAACC,EAAf;AAGA,UAAMzC,OAAO,GAAGP,yBAAyB,CAACxF,KAAK,CAACP,GAAP,EAAYY,KAAZ,EAAmB,KAAnB,CAAzC;;AAEA,QAAI,CAAC6G,MAAL,EAAa;AACXoC,MAAAA,aAAa,GAAGvD,OAAO,CAACI,KAAxB;AAEAJ,MAAAA,OAAO,CAACI,KAAR;AAEAnD,MAAAA,KAAK,GAAGhD,KAAK,CAACyG,IAAN,CAAW,cAAX,EAA2B,EAA3B,EAA+B,CAA/B,CAAR;AACAzD,MAAAA,KAAK,CAACN,IAAN,GAAa;AACXC,QAAAA,EAAE,EAAEoD,OAAO,CAACpD,EADD;AAEXG,QAAAA,KAAK,EAAEwG;AAFI,OAAb;AAKA5C,MAAAA,0BAA0B,CAAC1G,KAAD,EAAQ+F,OAAO,CAACpD,EAAhB,CAA1B,CAXW;AAcZ;;AAED3C,IAAAA,KAAK,CAACwH,GAAN,GAAYA,GAAZ;AACAxH,IAAAA,KAAK,CAACiJ,MAAN,GAAehD,GAAf;AACA,WAAO,IAAP;AACD;;;AAGD,WAASlB,YAAT,CAAsB/E,KAAtB,EAA6BkH,MAA7B;AACE,QAAI7G,KAAJ;AAAA,QACImH,GADJ;AAAA,QAEI8B,aAFJ;AAAA,QAGItG,KAHJ;AAAA,QAIIiD,GAAG,GAAGjG,KAAK,CAACiJ,MAJhB;AAAA,QAKIpB,KAAK,GAAG7H,KAAK,CAACwH,GALlB;;AAQA,QAAIK,KAAK,GAAG,CAAR,GAAY5B,GAAhB,EAAqB;AAAE,aAAO,KAAP;AAAe;;AAEtC,QAAIjG,KAAK,CAACiI,GAAN,CAAUC,UAAV,CAAqBL,KAArB,MAAgC;AAAI;AAAxC,MAAiD;AAAE,eAAO,KAAP;AAAe;;AAClE,QAAI7H,KAAK,CAACiI,GAAN,CAAUC,UAAV,CAAqBL,KAAK,GAAG,CAA7B,MAAoC;AAAI;AAA5C,MAAqD;AAAE,eAAO,KAAP;AAAe;;AAEtE,SAAKL,GAAG,GAAGK,KAAK,GAAG,CAAnB,EAAsBL,GAAG,GAAGvB,GAA5B,EAAiCuB,GAAG,EAApC,EAAwC;AACtC,UAAIxH,KAAK,CAACiI,GAAN,CAAUC,UAAV,CAAqBV,GAArB,MAA8B,IAAlC,EAAwC;AAAE,eAAO,KAAP;AAAe;;AACzD,UAAIxH,KAAK,CAACiI,GAAN,CAAUC,UAAV,CAAqBV,GAArB,MAA8B,IAAlC,EAAwC;AAAE,eAAO,KAAP;AAAe;;AACzD,UAAIxH,KAAK,CAACiI,GAAN,CAAUC,UAAV,CAAqBV,GAArB,MAA8B;AAAK;AAAvC,QAAgD;AAC9C;AACD;AACF;;AAED,QAAIA,GAAG,KAAKK,KAAK,GAAG,CAApB,EAAuB;AAAE,aAAO,KAAP;AAAe;;;AACxC,QAAIL,GAAG,IAAIvB,GAAX,EAAgB;AAAE,aAAO,KAAP;AAAe;;AACjCuB,IAAAA,GAAG;AAEHnH,IAAAA,KAAK,GAAGL,KAAK,CAACiI,GAAN,CAAUI,KAAV,CAAgBR,KAAK,GAAG,CAAxB,EAA2BL,GAAG,GAAG,CAAjC,CAAR;AAEA,UAAMzB,OAAO,GAAGP,yBAAyB,CAACxF,KAAK,CAACP,GAAP,EAAYY,KAAZ,EAAmB,KAAnB,CAAzC;;AAEA,QAAI,CAAC6G,MAAL,EAAa;AACXoC,MAAAA,aAAa,GAAGvD,OAAO,CAACI,KAAxB;AAEAJ,MAAAA,OAAO,CAACI,KAAR;AAEAnD,MAAAA,KAAK,GAAGhD,KAAK,CAACyG,IAAN,CAAW,cAAX,EAA2B,EAA3B,EAA+B,CAA/B,CAAR;AACAzD,MAAAA,KAAK,CAACN,IAAN,GAAa;AACXC,QAAAA,EAAE,EAAEoD,OAAO,CAACpD,EADD;AAEXG,QAAAA,KAAK,EAAEwG;AAFI,OAAb;AAKA5C,MAAAA,0BAA0B,CAAC1G,KAAD,EAAQ+F,OAAO,CAACpD,EAAhB,CAA1B,CAXW;AAcZ;;AAED3C,IAAAA,KAAK,CAACwH,GAAN,GAAYA,GAAZ;AACAxH,IAAAA,KAAK,CAACiJ,MAAN,GAAehD,GAAf;AACA,WAAO,IAAP;AACD;;AAED,WAASsD,6BAAT,CAAuCvJ,KAAvC,EAA8CwJ,SAA9C,EAAyDC,gBAAzD,EAA2ExJ,QAA3E;AACE,QAAIwJ,gBAAgB,CAAC5J,MAAjB,KAA4B,CAAhC,EAAmC;AACjC,aADiC;AAElC;;AAED,QAAI6J,aAAa,GAAG,EAApB;AACA,UAAMC,mBAAmB,GAAG3J,KAAK,CAACP,GAAN,CAAUwD,SAAV,CAAoBC,IAAhD;AAEA,QAAIF,KAAK,GAAG,IAAIhD,KAAK,CAACuG,KAAV,CAAgB,qBAAhB,EAAuC,EAAvC,EAA2C,CAA3C,CAAZ;AACAvD,IAAAA,KAAK,CAACkB,MAAN,GAAehE,cAAc,CAACmB,QAAf,CAAwBrB,KAAxB,EAA+BC,QAA/B,EAAyCD,KAAK,CAACP,GAA/C,EAAoDS,cAApD,CAAf;AACA8C,IAAAA,KAAK,CAACN,IAAN,GAAa;AACXyB,MAAAA,SAAS,EAAE,EAAEnE,KAAK,CAACP,GAAN,CAAUwD,SAAV,CAAoB4C,cADtB;AAEX5F,MAAAA;AAFW,KAAb;AAIAyJ,IAAAA,aAAa,CAACjD,IAAd,CAAmBzD,KAAnB;;AAEA,SAAK,MAAML,EAAX,IAAiB8G,gBAAjB,EAAmC;AACjC,YAAMG,EAAE,GAAGD,mBAAmB,CAAChH,EAAD,CAA9B;AACA,YAAMkH,kBAAkB,GAAGH,aAAa,CAAC7J,MAAzC;AAEAmD,MAAAA,KAAK,GAAQ,IAAIhD,KAAK,CAACuG,KAAV,CAAgB,eAAhB,EAAiC,EAAjC,EAAqC,CAArC,CAAb;AACAvD,MAAAA,KAAK,CAACN,IAAN,GAAa;AACXC,QAAAA,EADW;AAEX1C,QAAAA;AAFW,OAAb;AAIAyJ,MAAAA,aAAa,CAACjD,IAAd,CAAmBzD,KAAnB;;AAEA,UAAI4G,EAAE,CAACvJ,KAAH,IAAY,IAAhB,EAAsB;AACpB;AACA2C,QAAAA,KAAK,GAAY,IAAIhD,KAAK,CAACuG,KAAV,CAAgB,gBAAhB,EAAkC,GAAlC,EAAuC,CAAvC,CAAjB;AACAvD,QAAAA,KAAK,CAAC6F,KAAN,GAAiB,IAAjB;AACAa,QAAAA,aAAa,CAACjD,IAAd,CAAmBzD,KAAnB;AAEAA,QAAAA,KAAK,GAAY,IAAIhD,KAAK,CAACuG,KAAV,CAAgB,QAAhB,EAA0B,EAA1B,EAA8B,CAA9B,CAAjB;AACAvD,QAAAA,KAAK,CAAC8G,QAAN,GAAiBF,EAAE,CAACtK,MAApB;AACA0D,QAAAA,KAAK,CAACkD,OAAN,GAAiB0D,EAAE,CAAC1D,OAApB;AACAwD,QAAAA,aAAa,CAACjD,IAAd,CAAmBzD,KAAnB;AAEAA,QAAAA,KAAK,GAAY,IAAIhD,KAAK,CAACuG,KAAV,CAAgB,iBAAhB,EAAmC,GAAnC,EAAwC,CAAC,CAAzC,CAAjB;AACAvD,QAAAA,KAAK,CAAC6F,KAAN,GAAiB,IAAjB;AACAa,QAAAA,aAAa,CAACjD,IAAd,CAAmBzD,KAAnB;AACD,OAdD,MAcO;AACL;AACA0G,QAAAA,aAAa,GAAGA,aAAa,CAACK,MAAd,CAAqBH,EAAE,CAACtK,MAAH,IAAa,EAAlC,CAAhB;AACD,OA5BgC;AA+BjC;AACA;AACA;AACA;AACA;;;AAEA,YAAM0K,GAAG,GAAGJ,EAAE,CAACzD,KAAf;;AACA,UAAI6D,GAAG,GAAG,CAAV,EAAa;AACX5D,QAAAA,OAAO,CAAC6D,KAAR,gBAA6BtH,yEAA7B,EAAwGiH,EAAxG;AACAF,QAAAA,aAAa,GAAGA,aAAa,CAACrB,KAAd,CAAoB,CAApB,EAAuBwB,kBAAvB,CAAhB;AACD,OAHD,MAGO;AACL,aAAK,IAAIK,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,GAApB,EAAyBE,CAAC,EAA1B,EAA8B;AAC5BlH,UAAAA,KAAK,GAAG,IAAIhD,KAAK,CAACuG,KAAV,CAAgB,iBAAhB,EAAmC,EAAnC,EAAuC,CAAvC,CAAR;AACAvD,UAAAA,KAAK,CAACN,IAAN,GAAa;AACXC,YAAAA,EADW;AAEXG,YAAAA,KAAK,EAAEoH,CAFI;AAGXtF,YAAAA,YAAY,EAAEoF,GAHH;AAIX/J,YAAAA;AAJW,WAAb;AAMAyJ,UAAAA,aAAa,CAACjD,IAAd,CAAmBzD,KAAnB;AACD,SAVI;AAaL;AACA;;;AAEAA,QAAAA,KAAK,GAAG,IAAIhD,KAAK,CAACuG,KAAV,CAAgB,gBAAhB,EAAkC,EAAlC,EAAsC,CAAC,CAAvC,CAAR;AACAvD,QAAAA,KAAK,CAACN,IAAN,GAAa;AACXC,UAAAA,EADW;AAEX1C,UAAAA;AAFW,SAAb;AAIAyJ,QAAAA,aAAa,CAACjD,IAAd,CAAmBzD,KAAnB;AACD;AACF;;AAEDA,IAAAA,KAAK,GAAG,IAAIhD,KAAK,CAACuG,KAAV,CAAgB,sBAAhB,EAAwC,EAAxC,EAA4C,CAAC,CAA7C,CAAR;AACAvD,IAAAA,KAAK,CAACN,IAAN,GAAa;AACXzC,MAAAA;AADW,KAAb;AAGAyJ,IAAAA,aAAa,CAACjD,IAAd,CAAmBzD,KAAnB;AAEAhD,IAAAA,KAAK,CAACV,MAAN,CAAa6K,MAAb,CAAoBX,SAApB,EAA+B,CAA/B,EAAkC,GAAGE,aAArC;AACD;;AAED,WAASU,iDAAT,CAA2D9K,MAA3D,EAAmEC,GAAnE;AACE,QAAIyE,GAAG,GAAG1E,MAAM,CAACC,GAAD,CAAhB;;AACA,WAAOyE,GAAG,KAAKA,GAAG,CAACH,IAAJ,KAAa,4BAAb,IAA6CG,GAAG,CAACH,IAAJ,KAAa,0BAA/D,CAAV,EAAsG;AACpGtE,MAAAA,GAAG;AACHyE,MAAAA,GAAG,GAAG1E,MAAM,CAACC,GAAD,CAAZ;AACD;;AACD,WAAOyE,GAAG,IAAKA,GAAG,CAACH,IAAJ,KAAa,yBAA5B;AACD;;;AAGD,WAASwG,aAAT,CAAuBrK,KAAvB,EAA8BgH,SAA9B,EAAyCC,OAAzC,EAAkDC,MAAlD;AACE,QAAIjG,CAAJ;AAAA,QAAuBqJ,OAAvB;AAAA,QACIC,SAAS,GAAG,KADhB;;;AAKA,QAAI,CAACvK,KAAK,CAACP,GAAN,CAAUwD,SAAf,EAA0B;AACxB;AACAjD,MAAAA,KAAK,CAACV,MAAN,GAAeU,KAAK,CAACV,MAAN,CAAakL,MAAb,CAAoB,UAAUxG,GAAV,EAAezE,GAAf;AACjC,eAAQyE,GAAG,CAACH,IAAJ,KAAa,4BAArB;AACD,OAFc,CAAf;AAGA;AACD;;AAED,UAAM8B,KAAK,GAAG3F,KAAK,CAACP,GAAN,CAAUwD,SAAV,CAAoB0C,KAAlC;;AAEA,aAAS8E,uBAAT,CAAiCC,GAAjC,EAAsCC,GAAtC;AACE,aAAOhF,KAAK,CAAC+E,GAAD,CAAL,GAAa/E,KAAK,CAACgF,GAAD,CAAzB;AACD;;;AAID,UAAMzH,IAAI,GAAGlD,KAAK,CAACP,GAAN,CAAUwD,SAAV,CAAoBC,IAAjC;AAGA;AACA;;AACAlD,IAAAA,KAAK,CAACV,MAAN,GAAeU,KAAK,CAACV,MAAN,CAAakL,MAAb,CAAoB,UAAUxG,GAAV,EAAezE,GAAf;AACjC,cAAQyE,GAAG,CAACH,IAAZ;AACA;AACA;AACA,aAAK,4BAAL;AACE,cAAI,CAACG,GAAG,CAACtB,IAAT,EAAe,OAAO,KAAP;AACf,cAAI,CAACsB,GAAG,CAACtB,IAAJ,CAASqE,aAAd,EAA6B,OAAO,KAAP;AAC7B;;AAEF,aAAK,yBAAL;AACEwD,UAAAA,SAAS,GAAG,IAAZ;AACAD,UAAAA,OAAO,GAAG,EAAV;AAER;;;;;;AAKQ,iBAAO,IAAP;;AAEF,aAAK,0BAAL;AACEC,UAAAA,SAAS,GAAG,KAAZ;AAEA,gBAAMxE,OAAO,GAAG7C,IAAI,CAACc,GAAG,CAACtB,IAAJ,CAASC,EAAV,CAApB;AACAoD,UAAAA,OAAO,CAACzG,MAAR,GAAiBgL,OAAjB;AAEA,iBAAO,IAAP;AAzBF;;AA2BA,UAAIC,SAAJ,EAAe;AACbD,QAAAA,OAAO,CAAC7D,IAAR,CAAazC,GAAb;AACD;;AACD,aAAO,CAACuG,SAAR;AACD,KAhCc,CAAf;;AAoCA,YAAQrK,cAAc,CAACsB,SAAvB;AACA;AACA;AACA,WAAK,CAAL,CAHA;;AAKA,WAAK,CAAL,CALA;;AAOA,WAAK,CAAL;AACE;AACA;AAEF;;AACA,WAAK,CAAL;AACE;AACA;AACA;AACA,cAAMoJ,OAAO,GAAG,EAAhB;;AACA,aAAK,IAAI3J,EAAC,GAAG,CAAb,EAAgBA,EAAC,GAAGiC,IAAI,CAACrD,MAAzB,EAAiCoB,EAAC,EAAlC,EAAsC;AACpC2J,UAAAA,OAAO,CAAC3J,EAAC,GAAG,CAAL,CAAP,GAAiBA,EAAjB;AACD;;AACD2J,QAAAA,OAAO,CAACC,IAAR,CAAa,CAACH,GAAD,EAAMC,GAAN;AACX,gBAAMG,KAAK,GAAG5H,IAAI,CAACwH,GAAD,CAAlB;AACA,gBAAMK,KAAK,GAAG7H,IAAI,CAACyH,GAAD,CAAlB;AACA/H,UAAAA,MAAM,CAACC,EAAP,CAAUiI,KAAV;AACAlI,UAAAA,MAAM,CAACC,EAAP,CAAUkI,KAAV;AAGA;AACA;;AACAnI,UAAAA,MAAM,CAACC,EAAP,CAAUiI,KAAK,CAACnI,EAAN,KAAa+H,GAAvB;AACA9H,UAAAA,MAAM,CAACC,EAAP,CAAUkI,KAAK,CAACpI,EAAN,KAAagI,GAAvB;AAGA;AACA;AACA;;AACA,mBAASK,QAAT,CAAkB3K,KAAlB;AACE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAM4K,CAAC,GAAG5K,KAAK,CAACiI,KAAN,CAAY,gBAAZ,KAAiC,CAAE,GAAF,CAA3C;AACA,kBAAM4C,GAAG,GAAG,CAACD,CAAC,CAAC,CAAD,CAAF,IAASE,QAArB;;AACA,mBAAO;AACL9K,cAAAA,KADK;AAEL+K,cAAAA,MAAM,EAAEF;AAFH,aAAP;AAID;;AAED,gBAAMG,MAAM,GAAGP,KAAK,CAACxK,aAAN,IAAuBwK,KAAK,CAACzK,KAA7B,IAAuC,KAAKyK,KAAK,CAACnI,EAAjE;AACA,gBAAM2I,MAAM,GAAGP,KAAK,CAACzK,aAAN,IAAuByK,KAAK,CAAC1K,KAA7B,IAAuC,KAAK0K,KAAK,CAACpI,EAAjE;AACA,gBAAM4I,KAAK,GAAGP,QAAQ,CAACK,MAAD,CAAtB;AACA,gBAAMG,KAAK,GAAGR,QAAQ,CAACM,MAAD,CAAtB;AACA,gBAAMG,IAAI,GAAGF,KAAK,CAACH,MAAN,GAAeI,KAAK,CAACJ,MAAlC;AACA,iBAAOK,IAAI,IAAIF,KAAK,CAAClL,KAAN,CAAYqL,aAAZ,CAA0BF,KAAK,CAACnL,KAAhC,CAAf;AAEA;AACA;AACD,SA5CD;AA6CA+F,QAAAA,OAAO,CAAC6D,KAAR,CAAc,iDAAd,EAAiEW,OAAO,CAACe,GAAR,CAAapM,GAAD;AAC3E,gBAAMa,IAAI,GAAG8C,IAAI,CAAC3D,GAAD,CAAjB;AACA,cAAI,CAACa,IAAL,EAAW,OAAO,KAAP;AACXwC,UAAAA,MAAM,CAACC,EAAP,CAAUzC,IAAI,CAACuC,EAAL,KAAYpD,GAAtB;AACA,iBAAO;AACLA,YAAAA,GADK;AAELqM,YAAAA,YAAY,EAAExL,IAAI,CAACE;AAAc;AAAnB,eAA2C,KAAKF,IAAI,CAACuC,EAF9D;AAGLvC,YAAAA;AAHK,WAAP;AAKD,SATgE,CAAjE,EASIwK,OATJ,EArDF;;AAiEE,aAAK,IAAIiB,IAAI,GAAG,CAAhB,EAAmBA,IAAI,GAAGjB,OAAO,CAAC/K,MAAlC,EAA0CgM,IAAI,EAA9C,EAAkD;AAChD,gBAAMlJ,EAAE,GAAGiI,OAAO,CAACiB,IAAD,CAAlB;AACAlG,UAAAA,KAAK,CAAChD,EAAD,CAAL,GAAYkJ,IAAZ;AACD;;AACDzF,QAAAA,OAAO,CAAC6D,KAAR,CAAc,mBAAd,EAAmCtE,KAAnC;AACA;AAlFF;;AAyFA,QAAImG,UAAJ;AACA,QAAIC,YAAY,GAAG,IAAIC,GAAJ,EAAnB;AACA,UAAMC,iBAAiB,GAAG,IAAID,GAAJ,EAA1B;;AACA,UAAME,QAAQ,GAAG,IAAIF,GAAJ,EAAjB;AAEA,QAAI1M,MAAM,GAAGU,KAAK,CAACV,MAAnB;AACA,UAAMqK,mBAAmB,GAAG3J,KAAK,CAACP,GAAN,CAAUwD,SAAV,CAAoBC,IAAhD;;AAEA,SAAKjC,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAG3B,MAAM,CAACO,MAAvB,EAA+BoB,CAAC,EAAhC,EAAoC;AAClC,YAAM+C,GAAG,GAAG1E,MAAM,CAAC2B,CAAD,CAAlB;;AACA,cAAQ+C,GAAG,CAACH,IAAZ;AACA,aAAK,4BAAL;AACE;AACA;AACA;AACA;AACA;AACA;AAAA;;AACEiI,YAAAA,UAAU,GAAG,IAAIE,GAAJ,EAAb;AAEA,kBAAMG,eAAe,GAAI,cAAAnI,GAAG,CAACtB,IAAJ,+BAAUqE,aAAV,KAA2B,EAApD,CAHF;;AAKE,iBAAK,MAAMpE,EAAX,IAAiBwJ,eAAjB,EAAkC;AAChC,oBAAMC,QAAQ,GAAGzC,mBAAmB,CAAChH,EAAD,CAApC,CADgC;;AAIhC,sBAAQyJ,QAAQ,CAACjK,IAAjB;AACA,qBAAK,GAAL;AACE2J,kBAAAA,UAAU,CAACO,GAAX,CAAe1J,EAAf;AACA;;AAEF,qBAAK,GAAL;AACE,sBAAI,CAACsJ,iBAAiB,CAACK,GAAlB,CAAsB3J,EAAtB,CAAL,EAAgC;AAC9BoJ,oBAAAA,YAAY,CAACM,GAAb,CAAiB1J,EAAjB;AACAsJ,oBAAAA,iBAAiB,CAACI,GAAlB,CAAsB1J,EAAtB;AACD;;AACD;;AAEF;AACA,qBAAK,GAAL;AACEuJ,kBAAAA,QAAQ,CAACG,GAAT,CAAa1J,EAAb;AACA;AAfF;AAiBD;;AAED,kBAAM4J,SAAS,GAAG,EAAlB;;AACA,iBAAK,MAAM5J,EAAX,IAAiBmJ,UAAU,CAACU,MAAX,EAAjB,EAAsC;AACpCD,cAAAA,SAAS,CAAC9F,IAAV,CAAe9D,EAAf;AACD;;AACD4J,YAAAA,SAAS,CAAC1B,IAAV,CAAeJ,uBAAf;AAEAlB,YAAAA,6BAA6B,CAACvJ,KAAD,EAAQiB,CAAC,GAAG,CAAZ,EAAesL,SAAf,EAA0B,OAA1B,CAA7B;AACAjN,YAAAA,MAAM,GAAGU,KAAK,CAACV,MAAf;AACD;AACD;;AAEF,aAAK,0BAAL;AACE;AACA;AACA;AACA;AACA;AACA,cAAI8K,iDAAiD,CAAC9K,MAAD,EAAS2B,CAAC,GAAG,CAAb,CAArD,EAAsE;AACpE;AACD,WAFD,MAEO;AACL,kBAAMwL,WAAW,GAAG,EAApB;;AACA,iBAAK,MAAM9J,EAAX,IAAiBoJ,YAAY,CAACS,MAAb,EAAjB,EAAwC;AACtCC,cAAAA,WAAW,CAAChG,IAAZ,CAAiB9D,EAAjB;AACD;;AACD8J,YAAAA,WAAW,CAAC5B,IAAZ,CAAiBJ,uBAAjB;AAEAlB,YAAAA,6BAA6B,CAACvJ,KAAD,EAAQiB,CAAC,GAAG,CAAZ,EAAewL,WAAf,EAA4B,SAA5B,CAA7B;AACAnN,YAAAA,MAAM,GAAGU,KAAK,CAACV,MAAf,CARK;;AAWLyM,YAAAA,YAAY,GAAG,IAAIC,GAAJ,EAAf;AACD;;AACD;AAnEF;AAqED;;;AAGD;AACE,YAAMU,OAAO,GAAG,EAAhB;;AACA,WAAK,MAAM/J,EAAX,IAAiBuJ,QAAQ,CAACM,MAAT,EAAjB,EAAoC;AAClCE,QAAAA,OAAO,CAACjG,IAAR,CAAa9D,EAAb;AACD;;AACDyD,MAAAA,OAAO,CAAC6D,KAAR,CAAc,iBAAd,EAAiC;AAAEyC,QAAAA;AAAF,OAAjC;AACAA,MAAAA,OAAO,CAAC7B,IAAR,CAAaJ,uBAAb;AACArE,MAAAA,OAAO,CAAC6D,KAAR,CAAc,2BAAd,EAA2C;AAAEyC,QAAAA;AAAF,OAA3C;AAEAnD,MAAAA,6BAA6B,CAACvJ,KAAD,EAAQV,MAAM,CAACO,MAAf,EAAuB6M,OAAvB,EAAgC,KAAhC,CAA7B,CATF;AAWC;AAGD;;AACA1M,IAAAA,KAAK,CAACP,GAAN,CAAUkN,WAAV,CAAsBrN,MAAtB,GAA+BU,KAAK,CAACV,MAArC;AACD;;;AAGDqC,EAAAA,EAAE,CAACkH,KAAH,CAAS+D,KAAT,CAAeC,MAAf,CAAsB,OAAtB,EAA+B,4BAA/B,EAA6DzH,0BAA7D;AAEAzD,EAAAA,EAAE,CAACkH,KAAH,CAAS+D,KAAT,CAAeC,MAAf,CAAsB,WAAtB,EAAmC,cAAnC,EAAmD1F,YAAnD,EAAiE;AAAE2F,IAAAA,GAAG,EAAE,CAAE,WAAF,EAAe,WAAf;AAAP,GAAjE;AACAnL,EAAAA,EAAE,CAACwH,MAAH,CAAUyD,KAAV,CAAgBG,KAAhB,CAAsB,OAAtB,EAA+B,iBAA/B,EAAkDhE,eAAlD;AACApH,EAAAA,EAAE,CAACwH,MAAH,CAAUyD,KAAV,CAAgBG,KAAhB,CAAsB,iBAAtB,EAAyC,wBAAzC,EAAmE1D,sBAAnE;AACA1H,EAAAA,EAAE,CAACwH,MAAH,CAAUyD,KAAV,CAAgBG,KAAhB,CAAsB,wBAAtB,EAAgD,cAAhD,EAAgEhI,YAAhE;AACApD,EAAAA,EAAE,CAACZ,IAAH,CAAQ6L,KAAR,CAAcG,KAAd,CAAoB,QAApB,EAA8B,eAA9B,EAA+C1C,aAA/C;AACD;;;;"}