{"version":3,"file":"markdownItFootnote.modern.js","sources":["../index.ts"],"sourcesContent":["// Process footnotes\n//\n\nimport { strict as assert } from 'assert';\n\n\n////////////////////////////////////////////////////////////////////////////////\n// Renderer partials\n\n\n\ninterface FootnotePluginOptions {\n  numberSequence?: Array<any>;\n  modeOverride?: string;\n  sortOrder: number;\n  refCombiner?: string;\n}\n\ninterface GenericInfoParameters {\n  options: any;          // markdown_it options object\n  plugin_options: FootnotePluginOptions;\n  env: any;              // markdown_it environment object\n  self: any;             // reference to this plugin instance\n}\n\ninterface RenderInfoParameters extends GenericInfoParameters {\n  tokens: Array<any>;    // array of tokens\n  idx: number;           // index of current token in token array\n}\n\ninterface footnoteMetaInfo {\n  id: number;\n  label?: string;\n  labelOverride?: string;\n  mode?: string;\n  content?: string;\n  tokens?: Array<any>;\n  count: number;\n}\n\n\n\nfunction anchorFnDefault(n: number, excludeSubId: number, baseInfo: GenericInfoParameters) {\n  const env = baseInfo.env;\n  assert.ok(env != null);\n  let prefix = '';\n  if (typeof env.docId === 'string' && env.docId.length > 0) {\n    prefix = '-' + env.docId + '-';\n  }\n  return prefix + n;\n}\n\nfunction captionFnDefault(n, baseInfo: GenericInfoParameters) {\n  //return '[' + n + ']';\n  return '' + n;\n}\n\nfunction headerFnDefault(category, baseInfo: GenericInfoParameters) {\n  switch (category) {\n  case 'aside':\n    return 'Side Notes';\n\n  case 'section':\n    return 'Section Notes';\n\n  case 'end':\n    return 'Endnotes';\n\n  default:                  // used for error category, e.g. 'Error::Unused'\n    return category;\n  }\n}\n\nfunction determine_footnote_symbol(idx: number, info: footnoteMetaInfo, baseInfo: GenericInfoParameters): string {\n  const plugin_options = baseInfo.plugin_options;\n  assert.ok(plugin_options != null);\n\n  // rule to construct the printed label:\n  //\n  //     mark = labelOverride  /* || info.label */  || idx;\n  const label = info.labelOverride;\n  if (label) {\n    return label;\n  }\n  if (plugin_options.numberSequence == null || plugin_options.numberSequence.length === 0) {\n    return '' + idx;\n  }\n  const len = plugin_options.numberSequence.length;\n  if (idx >= len) {\n    // is last slot numeric or alphanumerically?\n    const slot = plugin_options.numberSequence[len - 1];\n    if (Number.isFinite(slot)) {\n      const delta = idx - len + 1;\n      return '' + (slot + delta);\n    }\n\n    // non-numerical last slot --> duplicate, triplicate, etc.\n    const dupli = (idx / len) | 0;  // = int(x mod N)\n    const remainder = idx % len;\n    const core = plugin_options.numberSequence[remainder];\n    let str = '' + core;\n    for (let i = 1; i < dupli; i++) {\n      str += core;\n    }\n    return str;\n  }\n\n  return '' + plugin_options.numberSequence[idx];\n}\n\n\nconst bunched_mode_classes = [ '', 'footnote-bunched-ref-ref', 'footnote-bunched-ref-text' ];\n\n\nfunction generateFootnoteRefHtml(id, caption, refId, bunched_footnote_ref_mode, renderInfo: RenderInfoParameters) {\n  return `<a class=\"footnote-ref ${ bunched_mode_classes[bunched_footnote_ref_mode] }\" href=\"#fn${ id }\" id=\"fnref${ refId }\">${ renderInfo.tokens[renderInfo.idx].meta.text || '' }<sup class=\"footnote-ref\">${ caption }</sup></a>` +\n    (bunched_footnote_ref_mode !== 0 ? `<sup class=\"footnote-ref-combiner ${ bunched_mode_classes[bunched_footnote_ref_mode] }\">${ renderInfo.plugin_options.refCombiner || '' }</sup>` : '');\n}\n\nfunction generateFootnoteSectionStartHtml(renderInfo: RenderInfoParameters) {\n  const tok = renderInfo.tokens[renderInfo.idx];\n  assert(tok != null);\n  assert(tok.meta != null);\n  const header = (tok.markup ? `<h3 class=\"footnotes-header\">${ tok.markup }</h3>` : '');\n  const category = tok.meta.category;\n  assert.ok(category.length > 0);\n  return `<hr class=\"footnotes-sep footnotes-category-${ category }\" id=\"fnsection-hr-${ tok.meta.sectionId }\"${ renderInfo.options.xhtmlOut ? ' /' : '' }><aside class=\"footnotes footnotes-category-${ category }\" id=\"fnsection-${ tok.meta.sectionId }\">${ header }<ul class=\"footnotes-list\">\\n`;\n}\n\nfunction generateFootnoteSectionEndHtml(renderInfo: RenderInfoParameters) {\n  return '</ul>\\n</aside>\\n';\n}\n\nfunction generateFootnoteStartHtml(id, caption, renderInfo: RenderInfoParameters) {\n  // allow both a JavaWScript --> CSS approach via `data-footnote-caption`\n  // and a classic CSS approach while a display:inline-block SUP presenting\n  // the LI 'button' instead:\n  return `<li tabindex=\"-1\" id=\"fn${ id }\" class=\"footnote-item\" data-footnote-caption=\"${ caption }\"><span class=\"footnote-caption\"><sup class=\"footnote-caption\">${ caption }</sup></span><span class=\"footnote-content\">`;\n}\n\nfunction generateFootnoteEndHtml(renderInfo: RenderInfoParameters) {\n  return '</span></li>\\n';\n}\n\nfunction generateFootnoteBackRefHtml(id, refId, renderInfo: RenderInfoParameters) {\n  const tok = renderInfo.tokens[renderInfo.idx];\n  assert(tok != null);\n  assert(tok.meta != null);\n\n  /* ↩ with escape code to prevent display as Apple Emoji on iOS */\n  return ` <a href=\"#fnref${ refId }\" class=\"footnote-backref footnote-backref-${ tok.meta.subId } footnote-backref-R${ tok.meta.backrefCount - tok.meta.subId - 1 }\">\\u21a9\\uFE0E</a>`;\n}\n\n\n\n\n/*\nref:\n  return `<label aria-describedby=\"fn${id}\" role=\"presentation\" class=\"sidelink\" for=\"fn${id}-content\">\n<a aria-hidden=\"true\" href=\"#fn${id}\"><output class=\"highlight fnref\" id=\"fnref${refid}\">${caption}\n</output></a></label>`;\n\n\nopen:\n  return `<aside id=\"fn${id}\" class=\"sidenote\" role=\"note\">\n    <output aria-hidden=\"true\" class=\"highlight\" id=\"fn${id}-content\">\n    <label role=\"presentation\" for=\"fnref${id}\">`;\n}\n\nfunction render_sidenote_close() {\n  return '</label></output></aside>\\n';\n}\n\n*/\n\n\n\n\ninterface FootnotePluginOptions /* extends FootnotePluginOptions */ {                       // eslint-disable-line no-redeclare\n  anchorFn: (n: number, excludeSubId: number, baseInfo: GenericInfoParameters) => string;\n  captionFn: (n: number, baseInfo: GenericInfoParameters) => string;\n  headerFn: (category: string, baseInfo: GenericInfoParameters) => string;\n  mkLabel: (idx: number, info: footnoteMetaInfo, baseInfo: GenericInfoParameters) => string;\n}\n\n\n\n\nconst default_plugin_options: FootnotePluginOptions = {\n  // atDocumentEnd: false,               -- obsoleted option of the original plugin\n\n  anchorFn: anchorFnDefault,\n  captionFn: captionFnDefault,\n  headerFn: headerFnDefault,\n  mkLabel: determine_footnote_symbol,\n\n  // see also https://www.editage.com/insights/footnotes-in-tables-part-1-choice-of-footnote-markers-and-their-sequence\n  // why asterisk/star is not part of the default footnote marker sequence.\n  //\n  // For similar reasons, we DO NOT include the section § symbol in this list.\n  //\n  // when numberSequnce is NULL/empty, a regular numerical numbering is assumed.\n  // Otherwise, the array is indexed; when there are more footnotes than entries in\n  // the numberSequence array, the entries are re-used, but doubled/trippled, etc.\n  //\n  // When the indexing in this array hits a NUMERIC value (as last entry), any higher\n  // footnotes are NUMBERED starting at that number.\n  //\n  // NOTE: as we can reference the same footnote from multiple spots, we do not depend\n  // on CSS counter() approaches by default, but providee this mechanism in the plugin\n  // code itself.\n  numberSequence: [ '†', '‡', '††', '‡‡', '¶', 1 ],\n\n  // Overrides the footnode mode when set to one of the following:\n  //\n  // Recognized 'modes':\n  // '>': aside note (default for inline notes)\n  // ':': end node\n  // '=': section note (default for regular referenced notes)\n  //\n  modeOverride: null,\n\n  // list section notes and endnotes in order of:\n  //\n  // 0: first *appearance* in the text\n  // 1: first *reference* in the text\n  // 2: *definition* in the text\n  // 3: sorted alphanumerically by *coded* label,\n  //    i.e. *numeric* labels are sorted in numeric order (so `10` comes AFTER `7`!),\n  //    while all others are sorted using `String.localeCompare()`. When labels have\n  //    a *numeric leading*, e.g. `71geo` --> `71`, that part is sorted numerically first.\n  //\n  //    Here 'coded label' means the label constructed from the reference ids and label overrides\n  //    as used in the markdown source, using the expression\n  //           labelOverride || reference || id\n  //    which gives for these examples (assuming them to be the only definitions in your input):\n  //           [^refA]: ...      -->  null || 'refA' || 1\n  //           [^refB LBL]: ...  -->  'LBL' || 'refB' || 2\n  // 4: sorted alphanumerically by *printed* label\n  //    which is like mode 3, but now for the label as will be seen in the *output*!\n  sortOrder: 4,\n\n  // what to print between bunched-together footnote references, i.e. the '+' in `blabla¹⁺²`\n  refCombiner: ','\n};\n\nexport default function footnote_plugin(md, plugin_options) {\n  const parseLinkLabel = md.helpers.parseLinkLabel,\n        isSpace = md.utils.isSpace;\n\n  plugin_options = Object.assign({}, plugin_options, default_plugin_options);\n\n  function determine_mode(mode: string, default_mode: string) {\n    let override = null;\n    if (plugin_options.modeOverride && '>:='.includes(plugin_options.modeOverride)) {\n      override = plugin_options.modeOverride;\n    }\n    if ('>:='.includes(mode)) {\n      return {\n        mode: override || mode,\n        fromInput: true\n      };\n    }\n    return {\n      mode: override || default_mode,\n      fromInput: false\n    };\n  }\n\n  function render_footnote_n(tokens, idx, excludeSubId) {\n    const mark = tokens[idx].meta.id;\n    assert.ok(Number.isFinite(mark));\n    assert.ok(mark > 0);\n    let n = '' + mark; // = mark.toString();\n    assert.ok(n.length > 0);\n\n    if (!excludeSubId && tokens[idx].meta.subId > 0) {\n      n += '-' + tokens[idx].meta.subId;\n    }\n\n    return n;\n  }\n\n  function render_footnote_mark(renderInfo: RenderInfoParameters): string {\n    const token = renderInfo.tokens[renderInfo.idx];\n    assert.ok(token != null);\n    const info = renderInfo.env.footnotes.list[token.meta.id];\n    assert.ok(info != null);\n    const mark: string = plugin_options.mkLabel(token.meta.id, info, renderInfo);\n    assert.ok(mark.length > 0);\n    return mark;\n  }\n\n  function render_footnote_anchor_name(renderInfo: RenderInfoParameters) {\n    const n = render_footnote_n(renderInfo.tokens, renderInfo.idx, true);\n    return plugin_options.anchorFn(n, true, renderInfo);\n  }\n\n  function render_footnote_anchor_nameRef(renderInfo: RenderInfoParameters) {\n    const n = render_footnote_n(renderInfo.tokens, renderInfo.idx, false);\n    return plugin_options.anchorFn(n, false, renderInfo);\n  }\n\n  function render_footnote_caption(renderInfo: RenderInfoParameters) {\n    const n = render_footnote_mark(renderInfo);\n    return plugin_options.captionFn(n, renderInfo);\n  }\n\n  function render_footnote_ref(tokens, idx, options, env, self) {\n    const renderInfo: RenderInfoParameters = {\n      tokens,\n      idx,\n      options,\n      env,\n      plugin_options,\n      self\n    };\n    const id      = render_footnote_anchor_name(renderInfo);\n    const caption = render_footnote_caption(renderInfo);\n    const refId   = render_footnote_anchor_nameRef(renderInfo);\n\n    // check if multiple footnote references are bunched together:\n    // IFF they are, we should separate them with commas.\n    //\n    // Exception: when next token has an extra text (`meta.text`) the\n    // bunching together is not a problem as them the output will render\n    // like this: `bla<sup>1</sup><a>text<sup>2</sup></a>`, ergo a look\n    // like this: `bla¹text²` instead of bunched footnotes references ¹ and ²\n    // that would (without the extra comma injection) look like `bla¹²` instead\n    // of `x¹⁺²` (here '+' instead of ',' comma, but you get the idea -- there's no\n    // Unicode superscript-comma so that's why I used unicode superscript-plus\n    // in this 'ascii art' example).\n    //\n    const next_token = tokens[idx + 1] || {};\n    const next_token_meta = next_token.meta || {};\n    const bunched_footnote_ref_mode = (next_token.type === 'footnote_ref' ? !next_token_meta.text ? 1 : 2 : 0);\n\n    return generateFootnoteRefHtml(id, caption, refId, bunched_footnote_ref_mode, renderInfo);\n  }\n\n  function render_footnote_block_open(tokens, idx, options, env, self) {\n    const renderInfo: RenderInfoParameters = {\n      tokens,\n      idx,\n      options,\n      env,\n      plugin_options,\n      self\n    };\n    return generateFootnoteSectionStartHtml(renderInfo);\n  }\n\n  function render_footnote_block_close(tokens, idx, options, env, self) {\n    const renderInfo: RenderInfoParameters = {\n      tokens,\n      idx,\n      options,\n      env,\n      plugin_options,\n      self\n    };\n    return generateFootnoteSectionEndHtml(renderInfo);\n  }\n\n  function render_footnote_reference_open(tokens, idx, options, env, self) {\n    return '<!-- footnote reference start -->\\n';\n  }\n\n  function render_footnote_reference_close() {\n    return '<!-- footnote reference end -->\\n';\n  }\n\n  function render_footnote_mark_end_of_block() {\n    return '<!-- footnote dump marker -->\\n';\n  }\n\n  function render_footnote_open(tokens, idx, options, env, self) {\n    const renderInfo: RenderInfoParameters = {\n      tokens,\n      idx,\n      options,\n      env,\n      plugin_options,\n      self\n    };\n    const id = render_footnote_anchor_name(renderInfo);\n    const caption = render_footnote_caption(renderInfo);\n\n    // allow both a JavaScript --> CSS approach via `data-footnote-caption`\n    // and a classic CSS approach while a display:inline-block SUP presenting\n    // the LI 'button' instead:\n    return generateFootnoteStartHtml(id, caption, renderInfo);\n  }\n\n  function render_footnote_close(tokens, idx, options, env, self) {\n    const renderInfo: RenderInfoParameters = {\n      tokens,\n      idx,\n      options,\n      env,\n      plugin_options,\n      self\n    };\n    return generateFootnoteEndHtml(renderInfo);\n  }\n\n  function render_footnote_anchor_backref(tokens, idx, options, env, self) {\n    const renderInfo: RenderInfoParameters = {\n      tokens,\n      idx,\n      options,\n      env,\n      plugin_options,\n      self\n    };\n\n    const tok = tokens[idx];\n    assert(tok != null);\n    assert(tok.meta != null);\n    const id = render_footnote_anchor_name(renderInfo);\n    let refId = render_footnote_n(tokens, idx, false);\n    refId = plugin_options.anchorFn(refId, false, renderInfo);\n\n    return generateFootnoteBackRefHtml(id, refId, renderInfo);\n  }\n\n\n  md.renderer.rules.footnote_ref          = render_footnote_ref;\n  md.renderer.rules.footnote_block_open   = render_footnote_block_open;\n  md.renderer.rules.footnote_block_close  = render_footnote_block_close;\n  md.renderer.rules.footnote_reference_open   = render_footnote_reference_open;\n  md.renderer.rules.footnote_reference_close  = render_footnote_reference_close;\n  md.renderer.rules.footnote_mark_end_of_block = render_footnote_mark_end_of_block;\n  md.renderer.rules.footnote_open         = render_footnote_open;\n  md.renderer.rules.footnote_close        = render_footnote_close;\n  md.renderer.rules.footnote_anchor       = render_footnote_anchor_backref;\n\n  function obtain_footnote_info_slot(env, label: string|null, at_definition: boolean) {\n    if (!env.footnotes) {\n      env.footnotes = {\n        // map label tto ID:\n        refs: {},\n        // store footnote info indexed by ID\n        list: [],\n        // remap ID to re-ordered ID (determines placement order for section notes and endnotes)\n        idMap: [ 0 ],\n        idMapCounter: 0,\n\n        // and a counter for the generated sections (including asides); see the demo/test which\n        // uses the generated `#fnsection-DDD` identifiers to hack/fix the styling, for example.\n        sectionCounter: 0\n      };\n    }\n\n    // When label is NULL, this is a request from in INLINE NOTE.\n\n    // NOTE: IDs are index numbers, BUT they start at 1 instead of 0 to make life easier in check code:\n    let footnoteId;\n    let infoRec: footnoteMetaInfo;\n    // label as index: prepend ':' to avoid conflict with Object.prototype members\n    if (label == null || !env.footnotes.refs[':' + label]) {\n      footnoteId = Math.max(1, env.footnotes.list.length);\n      infoRec = {\n        id: footnoteId,\n        label,\n        labelOverride: null,\n        mode: null,\n        content: null,\n        tokens: null,\n        count: 0\n      };\n      env.footnotes.list[footnoteId] = infoRec;\n      if (label != null) {\n        env.footnotes.refs[':' + label] = footnoteId;\n      }\n    } else {\n      footnoteId = env.footnotes.refs[':' + label];\n      infoRec = env.footnotes.list[footnoteId];\n      console.assert(!!infoRec, 'expects non-NULL footnote info record');\n    }\n\n    const idMap = env.footnotes.idMap;\n\n    // now check if the idMap[] has been set up already as well. This depends on\n    // when WE are invoked (`at_definition`) and the configured `options.sortOrder`:\n    switch (plugin_options.sortOrder) {\n    // 0: first *appearance* in the text\n    default:\n    case 0:\n      // basically, this means: order as-is\n      if (!idMap[footnoteId]) {\n        idMap[footnoteId] = ++env.footnotes.idMapCounter;\n      }\n      break;\n\n    // 1: first *reference* in the text\n    case 1:\n      if (!at_definition && !idMap[footnoteId]) {\n        // first reference is now!\n        idMap[footnoteId] = ++env.footnotes.idMapCounter;\n      }\n      break;\n\n    // 2: *definition* in the text\n    case 2:\n      if (at_definition && !idMap[footnoteId]) {\n        // definition is now!\n        idMap[footnoteId] = ++env.footnotes.idMapCounter;\n      }\n      break;\n\n    // 3: sorted alphanumerically by label (inline footnotes will end up at the top, before all other notes)\n    case 3:\n    case 4:\n      // just note the footnoteId now; this must be re-ordered later when we have collected all footnotes.\n      //\n      // set it up when we get there...\n      break;\n    }\n\n    return infoRec;\n  }\n\n  function find_end_of_block_marker(state, startIndex) {\n    let idx, len;\n    const tokens = state.tokens;\n    for (idx = startIndex, len = tokens.length; idx < len; idx++) {\n      if (tokens[idx].type === 'footnote_mark_end_of_block') { return idx; }\n    }\n    //console.error({ tok: tokens.slice(startIndex), startIndex, idx, len });\n    //throw Error('Should never get here!');\n\n    // Punch a slot into the token stream (at the very end)\n    // for consistency with footnote_mark_end_of_block():\n    //footnote_mark_end_of_block(state, startLine, endLine, silent);\n    const token = new state.Token('footnote_mark_end_of_block', '', 0);\n    token.hidden = true;\n    //token.meta = {\n    //  EndOfFile: true\n    //};\n    tokens.push(token);\n    return tokens.length - 1;\n  }\n\n  function update_end_of_block_marker(state, footnoteId) {\n    // inject marker into parent = block level token stream to announce the advent of an (inline) footnote:\n    // because the markdown_it code uses a for() loop to go through the parent nodes while parsing the\n    // 'inline' chunks, we CANNOT safely inject a marker BEFORE the chunk, only AFTERWARDS:\n    const parentState = state.env.parentState;\n    const parentIndex = state.env.parentTokenIndex;\n    const markerTokenIndex = find_end_of_block_marker(parentState, parentIndex + 1);\n    const token = parentState.tokens[markerTokenIndex];\n    if (!token.meta) {\n      token.meta = {\n        footnote_list: []\n      };\n    }\n    token.meta.footnote_list.push(footnoteId);\n  }\n\n  // Mark end of paragraph/heading/whatever BLOCK (or rather: START of the next block!)\n  function footnote_mark_end_of_block(state, startLine, endLine, silent) {\n    if (!silent && state.tokens.length > 0) {\n      const token = state.push('footnote_mark_end_of_block', '', 0);\n      token.hidden = true;\n    }\n    return false;\n  }\n\n  // Process footnote block definition\n  function footnote_def(state, startLine, endLine, silent) {\n    let oldBMark, oldTShift, oldSCount, oldParentType, pos, label, token,\n        initial, offset, ch, posAfterColon,\n        start = state.bMarks[startLine] + state.tShift[startLine],\n        max = state.eMarks[startLine];\n\n    // line should be at least 6 chars - \"[^x]: \" or \"[^x]:> \"\n    if (start + 5 > max) { return false; }\n\n    if (state.src.charCodeAt(start) !== 0x5B/* [ */) { return false; }\n    if (state.src.charCodeAt(start + 1) !== 0x5E/* ^ */) { return false; }\n\n    for (pos = start + 2; pos < max; pos++) {\n      if (state.src.charCodeAt(pos) === 0x0A /* LF */) { return false; }\n      if (state.src.charCodeAt(pos) === 0x5D /* ] */) {\n        break;\n      }\n    }\n    const labelEnd = pos;\n\n    if (pos === start + 2) { return false; } // no empty footnote labels\n    if (pos + 1 >= max || state.src.charCodeAt(++pos) !== 0x3A /* : */) { return false; }\n\n    const mode_rec = determine_mode(state.src[pos + 1], '=');   // default mode is section_note mode.\n    if (mode_rec.fromInput) { pos++; }\n    const mode = mode_rec.mode;\n\n    if (pos + 1 >= max || state.src.charCodeAt(++pos) !== 0x20 /* space */) { return false; }\n    if (silent) { return true; }\n    pos++;\n\n    label = state.src.slice(start + 2, labelEnd);\n    let text;\n    if (label.match(/^(\\S+)\\s+(.+)$/)) {\n      label = RegExp.$1;\n      text = RegExp.$2;\n    }\n\n    //console.error('extracted label = ', { label, text, labelEnd, pos, start });\n\n    // Now see if we already have a footnote ID for this footnote label:\n    // fetch it if we have one and otherwise produce a new one so everyone\n    // can use this from now on.\n    //\n    // This scenario is possible when the footnote *definition* comes BEFORE\n    // the first actual footnote *use* (*reference*). This is UNUSUAL when people\n    // write texts, but it is *not impossible*, particularly now that we have\n    // specified-by-design that endnotes can be marked as such (`[^label]:: note text`)\n    // and freely mixed with sidenotes (`[^label]:> note text`) and section\n    // notes (`[^label]:= note text` (explicit mode) or `[^label]: note text`\n    // (implicit mode)), where *section notes* will placed at the spot in the text\n    // flow where they were *defined*. Again, highly irregular, BUT someone MAY\n    // feel the need to place some section note *definitions* ABOVE their first\n    // use point.\n    //\n    const infoRec = obtain_footnote_info_slot(state.env, label, true);\n\n    infoRec.labelOverride = text;\n    infoRec.mode = mode;\n    infoRec.content = state.src.slice(pos, max);\n\n    token = state.push('footnote_reference_open', '', 1);\n    token.meta = {\n      id: infoRec.id\n    };\n    token.hidden = true;\n\n    oldBMark = state.bMarks[startLine];\n    oldTShift = state.tShift[startLine];\n    oldSCount = state.sCount[startLine];\n    oldParentType = state.parentType;\n\n    posAfterColon = pos;\n    initial = offset = state.sCount[startLine] + pos - (state.bMarks[startLine] + state.tShift[startLine]);\n\n    while (pos < max) {\n      ch = state.src.charCodeAt(pos);\n\n      if (isSpace(ch)) {\n        if (ch === 0x09) {\n          offset += 4 - offset % 4;\n        } else {\n          offset++;\n        }\n      } else {\n        break;\n      }\n\n      pos++;\n    }\n\n    state.tShift[startLine] = pos - posAfterColon;\n    state.sCount[startLine] = offset - initial;\n\n    state.bMarks[startLine] = posAfterColon;\n    state.blkIndent += 4;\n    state.parentType = 'footnote';\n\n    if (state.sCount[startLine] < state.blkIndent) {\n      state.sCount[startLine] += state.blkIndent;\n    }\n\n    state.md.block.tokenize(state, startLine, endLine, true);\n\n    state.parentType = oldParentType;\n    state.blkIndent -= 4;\n    state.tShift[startLine] = oldTShift;\n    state.sCount[startLine] = oldSCount;\n    state.bMarks[startLine] = oldBMark;\n\n    token = state.push('footnote_reference_close', '', -1);\n    token.meta = {\n      id: infoRec.id\n    };\n\n    return true;\n  }\n\n  // Process inline footnotes (^[...] or ^[>...])\n  function footnote_inline(state, silent) {\n    let labelStart,\n        labelEnd,\n        token,\n        tokens,\n        max = state.posMax,\n        start = state.pos;\n\n    if (start + 2 >= max) { return false; }\n    if (state.src.charCodeAt(start) !== 0x5E/* ^ */) { return false; }\n    if (state.src.charCodeAt(start + 1) !== 0x5B/* [ */) { return false; }\n\n    labelStart = start + 2;\n\n    // NOTE: inline notes are automatically considered to be ASIDE notes,\n    // UNLESS otherwise specified!\n    //\n    // Recognized 'modes':\n    // '>': aside note (default for inline notes)\n    // ':': end node\n    // '=': section note (default for regular referenced notes)\n    //\n    // (Also note https://v4.chriskrycho.com/2015/academic-markdown-and-citations.html:\n    // our notes look like this: `[^ref]:` while Academic MarkDown references look\n    // like this: `[@Belawog2012]` i.e. no '^' in there. Hence these can safely co-exist.)\n    //\n    const mode_rec = determine_mode(state.src[start + 2], '>');   // default mode is aside ~ sidenote mode.\n    if (mode_rec.fromInput) {\n      labelStart++;\n    }\n    const mode = mode_rec.mode;\n\n    labelEnd = parseLinkLabel(state, start + 1);\n\n    // parser failed to find ']', so it's not a valid note\n    if (labelEnd < 0) { return false; }\n\n    // We found the end of the link, and know for a fact it's a valid link;\n    // so all that's left to do is to call tokenizer.\n    //\n    if (!silent) {\n      // inline blocks have their own *child* environment in markdown-it v10+.\n      // As the footnotes must live beyond the lifetime of the inline block env,\n      // we must patch them into the `parentState.env` for the footnote_tail\n      // handler to be able to access them afterwards!\n      const parentState = state.env.parentState;\n      const parentEnv = parentState.env;\n\n      // WARNING: claim our footnote slot for there MAY be nested footnotes\n      // discovered in the next inline.parse() call below!\n      const infoRec = obtain_footnote_info_slot(parentEnv, null, true);\n      infoRec.mode = mode;\n      infoRec.count++;\n\n      token = state.push('footnote_ref', '', 0);\n      //token.meta = { id: footnoteId, subId: 0, label: null };\n      token.meta = {\n        id: infoRec.id\n      };\n\n      state.md.inline.parse(\n        state.src.slice(labelStart, labelEnd),\n        state.md,\n        state.env,\n        tokens = []\n      );\n\n      // Now fill our previously claimed slot:\n      infoRec.content = state.src.slice(labelStart, labelEnd);\n      infoRec.tokens = tokens;\n\n      // inject marker into parent = block level token stream to announce the advent of an (inline) footnote:\n      // because the markdown_it code uses a for() loop to go through the parent nodes while parsing the\n      // 'inline' chunks, we CANNOT safely inject a marker BEFORE the chunk, only AFTERWARDS:\n      update_end_of_block_marker(state, infoRec.id);\n\n      //md.block.ruler.enable('footnote_mark_end_of_block');\n    }\n\n    state.pos = labelEnd + 1;\n    state.posMax = max;\n    return true;\n  }\n\n  // Process footnote references with text ([^label ...])\n  function footnote_ref_with_text(state, silent) {\n    let label,\n        pos,\n        footnoteSubId,\n        token,\n        max = state.posMax,\n        start = state.pos;\n\n    // should be at least 6 chars - \"[^l x]\"\n    if (start + 5 > max) { return false; }\n\n    if (state.src.charCodeAt(start) !== 0x5B/* [ */) { return false; }\n    if (state.src.charCodeAt(start + 1) !== 0x5E/* ^ */) { return false; }\n\n    for (pos = start + 2; pos < max; pos++) {\n      if (state.src.charCodeAt(pos) === 0x0A /* linefeed */) { return false; }\n      if (state.src.charCodeAt(pos) === 0x5D /* ] */) {\n        break;\n      }\n    }\n\n    if (pos === start + 2) { return false; } // no empty footnote labels\n    if (pos >= max) { return false; }\n    pos++;\n\n    label = state.src.slice(start + 2, pos - 1);\n    if (!label || !label.match(/^(\\S+)\\s+(.+)$/)) { return false; }\n    label = RegExp.$1;\n    const text = RegExp.$2;\n\n    const infoRec = obtain_footnote_info_slot(state.env, label, false);\n\n    if (!silent) {\n      footnoteSubId = infoRec.count;\n\n      infoRec.count++;\n\n      token = state.push('footnote_ref', '', 0);\n      token.meta = {\n        id: infoRec.id,\n        subId: footnoteSubId\n      };\n\n      update_end_of_block_marker(state, infoRec.id);\n\n      //md.block.ruler.enable('footnote_mark_end_of_block');\n    }\n\n    state.pos = pos;\n    state.posMax = max;\n    return true;\n  }\n\n  // Process footnote references ([^...])\n  function footnote_ref(state, silent) {\n    let label,\n        pos,\n        footnoteSubId,\n        token,\n        max = state.posMax,\n        start = state.pos;\n\n    // should be at least 4 chars - \"[^x]\"\n    if (start + 3 > max) { return false; }\n\n    if (state.src.charCodeAt(start) !== 0x5B/* [ */) { return false; }\n    if (state.src.charCodeAt(start + 1) !== 0x5E/* ^ */) { return false; }\n\n    for (pos = start + 2; pos < max; pos++) {\n      if (state.src.charCodeAt(pos) === 0x20) { return false; }\n      if (state.src.charCodeAt(pos) === 0x0A) { return false; }\n      if (state.src.charCodeAt(pos) === 0x5D /* ] */) {\n        break;\n      }\n    }\n\n    if (pos === start + 2) { return false; } // no empty footnote labels\n    if (pos >= max) { return false; }\n    pos++;\n\n    label = state.src.slice(start + 2, pos - 1);\n\n    const infoRec = obtain_footnote_info_slot(state.env, label, false);\n\n    if (!silent) {\n      footnoteSubId = infoRec.count;\n\n      infoRec.count++;\n\n      token = state.push('footnote_ref', '', 0);\n      token.meta = {\n        id: infoRec.id,\n        subId: footnoteSubId\n      };\n\n      update_end_of_block_marker(state, infoRec.id);\n\n      //md.block.ruler.enable('footnote_mark_end_of_block');\n    }\n\n    state.pos = pos;\n    state.posMax = max;\n    return true;\n  }\n\n  function place_footnote_definitions_at(state, token_idx, footnote_id_list, category) {\n    if (footnote_id_list.length === 0) {\n      return; // nothing to inject...\n    }\n\n    let inject_tokens = [];\n    const footnote_spec_list = state.env.footnotes.list;\n\n    let token = new state.Token('footnote_block_open', '', 1);\n    token.markup = plugin_options.headerFn(category, state.env, plugin_options);\n    token.meta = {\n      sectionId: ++state.env.footnotes.sectionCounter,\n      category\n    };\n    inject_tokens.push(token);\n\n    for (const id of footnote_id_list) {\n      const fn = footnote_spec_list[id];\n      const inject_start_index = inject_tokens.length;\n\n      token      = new state.Token('footnote_open', '', 1);\n      token.meta = {\n        id,\n        category\n      };\n      inject_tokens.push(token);\n\n      if (fn.label == null) {\n        // process an inline footnote text:\n        token          = new state.Token('paragraph_open', 'p', 1);\n        token.block    = true;\n        inject_tokens.push(token);\n\n        token          = new state.Token('inline', '', 0);\n        token.children = fn.tokens;\n        token.content  = fn.content;\n        inject_tokens.push(token);\n\n        token          = new state.Token('paragraph_close', 'p', -1);\n        token.block    = true;\n        inject_tokens.push(token);\n      } else {\n        // process a labeled footnote:\n        inject_tokens = inject_tokens.concat(fn.tokens || []);\n      }\n\n      //let lastParagraph;\n      //if (inject_tokens[inject_tokens.length - 1].type === 'paragraph_close') {\n      //  lastParagraph = inject_tokens.pop();\n      //} else {\n      //  lastParagraph = null;\n      //}\n\n      const cnt = fn.count;\n      assert.ok(cnt >= 0);\n      for (let j = 0; j < cnt; j++) {\n        token = new state.Token('footnote_anchor', '', 0);\n        token.meta = {\n          id,\n          subId: j,\n          backrefCount: cnt,\n          category\n        };\n        inject_tokens.push(token);\n      }\n\n      //if (lastParagraph) {\n      //  inject_tokens.push(lastParagraph);\n      //}\n\n      token = new state.Token('footnote_close', '', -1);\n      token.meta = {\n        id,\n        category\n      };\n      inject_tokens.push(token);\n    }\n\n    token = new state.Token('footnote_block_close', '', -1);\n    token.meta = {\n      category\n    };\n    inject_tokens.push(token);\n\n    state.tokens.splice(token_idx, 0, ...inject_tokens);\n  }\n\n  function more_footnote_reference_blocks_follow_immediately(tokens, idx) {\n    let tok = tokens[idx];\n    while (tok && (tok.type === 'footnote_mark_end_of_block' || tok.type === 'footnote_reference_close')) {\n      idx++;\n      tok = tokens[idx];\n    }\n    return tok && (tok.type === 'footnote_reference_open');\n  }\n\n  // Glue footnote tokens into appropriate slots of token stream.\n  function footnote_tail(state, startLine, endLine, silent) {\n    let i, l, j, t, token, current, currentRefToken,\n        insideRef = false,\n        refTokens = {};\n\n    //console.error('@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ TAIL', state.env.footnotes);\n    if (!state.env.footnotes) {\n      // no footnotes at all? --> filter out all 'footnote_mark_end_of_block' chunks:\n      state.tokens = state.tokens.filter(function (tok, idx) {\n        return (tok.type !== 'footnote_mark_end_of_block');\n      });\n      return;\n    }\n\n    const idMap = state.env.footnotes.idMap;\n\n    const baseInfo: GenericInfoParameters = {\n      options: state.md.options,\n      env: state.env,\n      plugin_options,\n      self: this\n    };\n\n    function footnote_print_comparer(idA, idB) {\n      return idMap[idA] - idMap[idB];\n    }\n\n\n    // Rewrite the tokenstream to place the aside-footnotes and section footnotes where they need to be:\n    const footnote_spec_list = state.env.footnotes.list;\n\n    // extract the tokens constituting the footnote/sidenote *content* and\n    // store that bunch in `refTokens[:<currentLabel>]` instead, to be injected back into\n    // the tokenstream at the appropriate spots.\n    state.tokens = state.tokens.filter(function (tok, idx) {\n      switch (tok.type) {\n      // filter out 'footnote_mark_end_of_block' tokens which follow BLOCKS that do not contain any\n      // footnote/sidenote/endnote references:\n      case 'footnote_mark_end_of_block':\n        if (!tok.meta) return false;\n        if (!tok.meta.footnote_list) return false;\n        break;\n\n      case 'footnote_reference_open':\n        insideRef = true;\n        current = [];\n        currentRefToken = tok;\n/*\n        if (tok.meta.mode === '>') {\n          aside_list.push(idx);\n        }\n*/\n        return true;\n\n      case 'footnote_reference_close':\n        insideRef = false;\n\n        const infoRec = footnote_spec_list[tok.meta.id];\n        infoRec.tokens = current;\n\n        return true;\n      }\n      if (insideRef) {\n        current.push(tok);\n      }\n      return !insideRef;\n    });\n\n\n    // execute configured sorting/mapping (`idMap`):\n    switch (plugin_options.sortOrder) {\n    // 0: first *appearance* in the text\n    default:\n    case 0:\n    // 1: first *reference* in the text\n    case 1:\n    // 2: *definition* in the text\n    case 2:\n      // order is specified in the `idMap` already.\n      break;\n\n    // 3: sorted alphanumerically by label (inline footnotes will end up at the top, before all other notes)\n    case 3:\n    case 4:\n      // the `idMap[]` array has not been set up and must be produced\n      // to turn this into an alphanumerically-by-label sort order, where\n      // a `footnoteId` based index will produce the order of appearance.\n      const reIdMap = [];\n      for (let i = 1; i < footnote_spec_list.length; i++) {\n        reIdMap[i - 1] = i;\n      }\n      reIdMap.sort((idA, idB) => {\n        const infoA = footnote_spec_list[idA];\n        const infoB = footnote_spec_list[idB];\n        assert.ok(infoA);\n        assert.ok(infoB);\n\n        // is any of these an inline footnote, i.e. without any label yet? Produce a fake label for sorting then!\n        //\n        // As stated elsewhere: inline section_notes and end_notes will end up among everyone else in this sort order mode.\n        assert.ok(infoA.id === idA);\n        assert.ok(infoB.id === idB);\n\n        // Split a \"sort label\" up into its numerical part and the tail. Note that we don't call\n        // it 'tail' but 'label', because we will need to compare the ENTIRE LABEL using string comparison\n        // when the numeric leaders are identical, so as to ensure that 'labels' such as `00000` will sort\n        // as 'higher' than `000`, both of which will be rated as numerically identical!\n        function to_atoms(label) {\n          // now extract number or numerical leader part.\n          //\n          // Only accept OBVIOUS, SIMPLE NUMERIC LEADERS! This is about *legibility*\n          // of those numrical leaders, not a pedantic \"what is possibly legally numeric\"\n          // challenge. Hence we DO NOT accept leading +/- and only a decimal dot when\n          // there's a decimal number BEFORE it, such as in `5.1hack` --> `5.1`, but NOT\n          // `.42oz`!\n          //\n          // Do not use `nmr = +lbl` as that would treat labels such as `0xf4` as hexadecimal numbers,\n          // which we DO NOT want to happen.\n          const m = label.match(/^\\d+(?:\\.\\d+)?/) || [ 'x' ];\n          const nmr = +m[0] || Infinity;   // non-numeric labels are rated NUMEICALLY HIGHER than any numerical leader.\n          return {\n            label,\n            number: nmr\n          };\n        }\n\n        const labelA = (plugin_options.sortOrder === 3 ?\n          infoA.labelOverride || infoA.label || ('' + infoA.id) :\n          plugin_options.mkLabel(infoA.id, infoA, baseInfo)\n        );\n        const labelB = (plugin_options.sortOrder === 3 ?\n          infoB.labelOverride || infoB.label || ('' + infoB.id) :\n          plugin_options.mkLabel(infoB.id, infoB, baseInfo)\n        );\n        const atomA = to_atoms(labelA);\n        const atomB = to_atoms(labelB);\n        const diff = atomA.number - atomB.number;\n        return diff || atomA.label.localeCompare(atomB.label);\n        // ^^^^^^^ shorthand for:\n        //\n        // if (isNaN(diff) || diff === 0) then stringcompare else numeric-difference\n      });\n      /*\n      console.error('$$$$$$$$$$$$$$$$ sort order map: $$$$$$$$$$$$$$', reIdMap.map((idx) => {\n        const info = footnote_spec_list[idx];\n        if (!info) return '---';\n        assert.ok(info.id === idx);\n        return {\n          idx,\n          compareLabel: info.labelOverride /* || info.label *)/ || ('' + info.id),\n          info\n        };\n      }), reIdMap);\n      */\n\n      // Now turn this into a sort order map:\n      for (let prio = 0; prio < reIdMap.length; prio++) {\n        const id = reIdMap[prio];\n        idMap[id] = prio;\n      }\n      //console.error('@@@@@@@@@@@@@@@@@', idMap);\n      break;\n    }\n\n\n    const inject_tokens = [];\n\n    // Now go through the token stream and place the sidenotes, section_notes and endnotes where they belong:\n    let aside_list;\n    let section_list = new Set();\n    const section_done_list = new Set();  // once a section_note has been printed, it should never appear again!\n    const end_list = new Set();\n    const used_list = new Set();\n\n    let tokens = state.tokens;\n\n    for (i = 0; i < tokens.length; i++) {\n      const tok = tokens[i];\n      switch (tok.type) {\n      case 'footnote_mark_end_of_block':\n        // check the gathered list of footnotes referenced in this block:\n        // - dump the ones which are sidenotes\n        // - mark the ones which are section- or end-notes.\n        //\n        // Note: make sure we don't produce duplicates in the collect sets.\n        {\n          aside_list = new Set();\n\n          const refd_notes_list = (tok.meta?.footnote_list || []);\n          //console.error({ refd_notes_list });\n          for (const id of refd_notes_list) {\n            const footnote = footnote_spec_list[id];\n            //console.error({ id, footnote, footnote_spec_list });\n\n            switch (footnote.mode) {\n            case '>':\n              aside_list.add(id);\n              used_list.add(id);\n              break;\n\n            case '=':\n              if (!section_done_list.has(id)) {\n                section_list.add(id);\n                section_done_list.add(id);\n                used_list.add(id);\n              }\n              break;\n\n            default:\n            case ':':\n              end_list.add(id);\n              used_list.add(id);\n              break;\n            }\n          }\n\n          const aside_ids = [];\n          for (const id of aside_list.values()) {\n            aside_ids.push(id);\n          }\n          aside_ids.sort(footnote_print_comparer);\n\n          place_footnote_definitions_at(state, i + 1, aside_ids, 'aside');\n          tokens = state.tokens;\n        }\n        break;\n\n      case 'footnote_reference_close':\n        // anywhere a footnote *definition* appeared in the original text is\n        // also a place to dump the section_notes gathered to date, so to speak.\n        //\n        // However, DO detect clusters of footnote definitions and MERGE them\n        // together:\n        if (more_footnote_reference_blocks_follow_immediately(tokens, i + 1)) {\n          continue;\n        } else {\n          const section_ids = [];\n          for (const id of section_list.values()) {\n            section_ids.push(id);\n          }\n          section_ids.sort(footnote_print_comparer);\n\n          place_footnote_definitions_at(state, i + 1, section_ids, 'section');\n          tokens = state.tokens;\n\n          // and reset the tracking set:\n          section_list = new Set();\n        }\n        break;\n      }\n    }\n\n    // Now process the endnotes:\n    {\n      const end_ids = [];\n      for (const id of end_list.values()) {\n        end_ids.push(id);\n      }\n      //console.error('@@@@@@@@@@@@@@ ', { end_ids });\n      end_ids.sort(footnote_print_comparer);\n      //console.error('@@@@@@@@@@@@@@ after sort', { end_ids });\n\n      place_footnote_definitions_at(state, tokens.length, end_ids, 'end');\n      tokens = state.tokens;\n    }\n\n    // Now process the unused footnotes and dump them for diagnostic purposes:\n    {\n      const unused_ids = [];\n\n      for (let i = 1; i < footnote_spec_list.length; i++) {\n        const fn = footnote_spec_list[i];\n        const id = fn.id;\n        if (!used_list.has(id)) {\n          console.error(`ERROR: footnote ID ${id} is defined but never used. Footnote will be added as an ERRONEOUS ENDNOTE to the output, so the situation is easy to diagnose!`, Object.assign({}, fn, { tokens: '......' }));\n          unused_ids.push(id);\n        }\n      }\n      //console.error('@@@@@@@@@@@@@@ ', { unused_ids });\n      unused_ids.sort(footnote_print_comparer);\n      //console.error('@@@@@@@@@@@@@@ after sort', { unused_ids });\n\n      place_footnote_definitions_at(state, tokens.length, unused_ids, 'Error::Unused');\n      //tokens = state.tokens;\n    }\n\n    // Update state_block too as we have rewritten & REPLACED the token array earlier in this call:\n    // the reference `state.env.state_block.tokens` is still pointing to the OLD token array!\n    state.env.state_block.tokens = state.tokens;\n  }\n\n  // attach ourselves to the start of block handling too\n  md.block.ruler.before('table', 'footnote_mark_end_of_block', footnote_mark_end_of_block);\n\n  md.block.ruler.before('reference', 'footnote_def', footnote_def, { alt: [ 'paragraph', 'reference' ] });\n  md.inline.ruler.after('image', 'footnote_inline', footnote_inline);\n  md.inline.ruler.after('footnote_inline', 'footnote_ref_with_text', footnote_ref_with_text);\n  md.inline.ruler.after('footnote_ref_with_text', 'footnote_ref', footnote_ref);\n  md.core.ruler.after('inline', 'footnote_tail', footnote_tail);\n}\n"],"names":["anchorFnDefault","n","excludeSubId","baseInfo","env","assert","ok","prefix","docId","length","captionFnDefault","headerFnDefault","category","determine_footnote_symbol","idx","info","plugin_options","label","labelOverride","numberSequence","len","slot","Number","isFinite","delta","dupli","remainder","core","str","i","bunched_mode_classes","generateFootnoteRefHtml","id","caption","refId","bunched_footnote_ref_mode","renderInfo","tokens","meta","text","refCombiner","generateFootnoteSectionStartHtml","tok","header","markup","sectionId","options","xhtmlOut","generateFootnoteSectionEndHtml","generateFootnoteStartHtml","generateFootnoteEndHtml","generateFootnoteBackRefHtml","subId","backrefCount","default_plugin_options","anchorFn","captionFn","headerFn","mkLabel","modeOverride","sortOrder","footnote_plugin","md","parseLinkLabel","helpers","isSpace","utils","Object","assign","determine_mode","mode","default_mode","override","includes","fromInput","render_footnote_n","mark","render_footnote_mark","token","footnotes","list","render_footnote_anchor_name","render_footnote_anchor_nameRef","render_footnote_caption","render_footnote_ref","self","next_token","next_token_meta","type","render_footnote_block_open","render_footnote_block_close","render_footnote_reference_open","render_footnote_reference_close","render_footnote_mark_end_of_block","render_footnote_open","render_footnote_close","render_footnote_anchor_backref","renderer","rules","footnote_ref","footnote_block_open","footnote_block_close","footnote_reference_open","footnote_reference_close","footnote_mark_end_of_block","footnote_open","footnote_close","footnote_anchor","obtain_footnote_info_slot","at_definition","refs","idMap","idMapCounter","sectionCounter","footnoteId","infoRec","Math","max","content","count","console","find_end_of_block_marker","state","startIndex","Token","hidden","push","update_end_of_block_marker","parentState","parentIndex","parentTokenIndex","markerTokenIndex","footnote_list","startLine","endLine","silent","footnote_def","oldBMark","oldTShift","oldSCount","oldParentType","pos","initial","offset","ch","posAfterColon","start","bMarks","tShift","eMarks","src","charCodeAt","labelEnd","mode_rec","slice","match","RegExp","$1","$2","sCount","parentType","blkIndent","block","tokenize","footnote_inline","labelStart","posMax","parentEnv","inline","parse","footnote_ref_with_text","footnoteSubId","place_footnote_definitions_at","token_idx","footnote_id_list","inject_tokens","footnote_spec_list","fn","children","concat","cnt","j","splice","more_footnote_reference_blocks_follow_immediately","footnote_tail","current","insideRef","filter","footnote_print_comparer","idA","idB","reIdMap","sort","infoA","infoB","to_atoms","m","nmr","Infinity","number","labelA","labelB","atomA","atomB","diff","localeCompare","prio","aside_list","section_list","Set","section_done_list","end_list","used_list","refd_notes_list","footnote","add","has","aside_ids","values","section_ids","end_ids","unused_ids","error","state_block","ruler","before","alt","after"],"mappings":"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"}