{"version":3,"file":"markdownItFootnote.modern.js","sources":["../index.ts"],"sourcesContent":["// Process footnotes\n//\n\nimport * as assert from 'assert';\n\n\n////////////////////////////////////////////////////////////////////////////////\n// Renderer partials\n\nfunction anchorFnDefault(n, excludeSubId, tokens, idx, options, env, slf) {\n  let prefix = '';\n  if (typeof env.docId === 'string' && env.docId.length > 0) {\n    prefix = '-' + env.docId + '-';\n  }\n  return prefix + n;\n}\n\nfunction captionFnDefault(n, tokens, idx, options, env, slf) {\n  //return '[' + n + ']';\n  return '' + n;\n}\n\nfunction headerFnDefault(state) {\n  return '';\n}\n\n\n/*\nref:\n  return `<label aria-describedby=\"fn${id}\" role=\"presentation\" class=\"sidelink\" for=\"fn${id}-content\">\n<a aria-hidden=\"true\" href=\"#fn${id}\"><output class=\"highlight fnref\" id=\"fnref${refid}\">${caption}\n</output></a></label>`;\n\n\nopen:\n  return `<aside id=\"fn${id}\" class=\"sidenote\" role=\"note\">\n    <output aria-hidden=\"true\" class=\"highlight\" id=\"fn${id}-content\">\n    <label role=\"presentation\" for=\"fnref${id}\">`;\n}\n\nfunction render_sidenote_close() {\n  return '</label></output></aside>\\n';\n}\n\n*/\n\nconst default_plugin_options = {\n  // atDocumentEnd: false,               -- obsoleted option of the original plugin\n\n  anchorFn: anchorFnDefault,\n  captionFn: captionFnDefault,\n  headerFn: headerFnDefault,\n\n  // see also https://www.editage.com/insights/footnotes-in-tables-part-1-choice-of-footnote-markers-and-their-sequence\n  // why asterisk/star is not part of the default footnote marker sequence.\n  //\n  // For similar reasons, we DO NOT include the section § symbol in this list.\n  //\n  // when numberSequnce is NULL/empty, a regular numerical numbering is assumed.\n  // Otherwise, the array is indexed; when there are more footnotes than entries in\n  // the numberSequence array, the entries are re-used, but doubled/trippled, etc.\n  //\n  // When the indexing in this array hits a NUMERIC value (as last entry), any higher\n  // footnotes are NUMBERED starting at that number.\n  //\n  // NOTE: as we can reference the same footnote from multiple spots, we do not depend\n  // on CSS counter() approaches by default, but providee this mechanism in the plugin\n  // code itself.\n  numberSequence: [ '†', '‡', '††', '‡‡', '¶', 1 ],\n\n  // Overrides the footnode mode when set to one of the following:\n  //\n  // Recognized 'modes':\n  // '>': aside note (default for inline notes)\n  // ':': end node\n  // '=': section note (default for regular referenced notes)\n  //\n  modeOverride: null,\n\n  // list section notes and endnotes in order of:\n  //\n  // 0: first *appearance* in the text\n  // 1: first *reference* in the text\n  // 2: *definition* in the text\n  // 3: sorted alphabetically by label (inline footnotes will end up at the top, before all other notes)\n  sortOrder: 3\n};\n\nexport default function footnote_plugin(md, plugin_options) {\n  const parseLinkLabel = md.helpers.parseLinkLabel,\n        isSpace = md.utils.isSpace;\n\n  plugin_options = Object.assign({}, plugin_options, default_plugin_options);\n\n  function determine_mode(mode: string, default_mode: string) {\n    if (plugin_options.modeOverride && '>:='.includes(plugin_options.modeOverride)) {\n      return {\n        mode: plugin_options.modeOverride,\n        fromInput: false\n      };\n    }\n    if ('>:='.includes(mode)) {\n      return {\n        mode,\n        fromInput: true\n      };\n    }\n    return {\n      mode: default_mode,\n      fromInput: false\n    };\n  }\n\n  function determine_footnote_symbol(idx) {\n    if (plugin_options.numberSequence == null || plugin_options.numberSequence.length === 0) { return idx + 1; }\n    const len = plugin_options.numberSequence.length;\n    if (idx >= len) {\n      // is last slot numeric or alphabetical?\n      const slot = plugin_options.numberSequence[len - 1];\n      if (Number.isFinite(slot)) {\n        const delta = idx - len + 1;\n        return slot + delta;\n      }\n\n        // non-numerical last slot --> duplicate, triplicate, etc.\n      const dupli = (idx / len) | 0;  // = int(x mod N)\n      const remainder = idx % len;\n      const core = plugin_options.numberSequence[remainder];\n      let str = core;\n      for (let i = 1; i < dupli; i++) {\n        str += core;\n      }\n      return str;\n\n    }\n\n    return plugin_options.numberSequence[idx];\n  }\n\n  function render_footnote_n(tokens, idx, excludeSubId) {\n    const mark = tokens[idx].meta.id + 1;\n    let n = '' + mark; // = mark.toString();\n\n    if (!excludeSubId && tokens[idx].meta.subId > 0) {\n      n += '-' + tokens[idx].meta.subId;\n    }\n\n    return n;\n  }\n\n  function render_footnote_mark(tokens, idx, env) {\n    const token = tokens[idx];\n    const info = env.footnotes.list[token.meta.id];\n    const labelOverride = info?.labelOverride;\n    const mark = labelOverride || determine_footnote_symbol(token.meta.id);\n    const n = '' + mark; // = mark.toString();\n    return n;\n  }\n\n  function render_footnote_anchor_name(tokens, idx, options, env, slf) {\n    const n = render_footnote_n(tokens, idx, true);\n    return plugin_options.anchorFn(n, true, tokens, idx, options, env, slf);\n  }\n\n  function render_footnote_anchor_nameRef(tokens, idx, options, env, slf) {\n    const n = render_footnote_n(tokens, idx, false);\n    return plugin_options.anchorFn(n, false, tokens, idx, options, env, slf);\n  }\n\n  function render_footnote_caption(tokens, idx, options, env, slf) {\n    const n = render_footnote_mark(tokens, idx, env);\n    return plugin_options.captionFn(n, tokens, idx, options, env, slf);\n  }\n\n  function render_footnote_ref(tokens, idx, options, env, slf) {\n    const id      = render_footnote_anchor_name(tokens, idx, options, env, slf);\n    const caption = render_footnote_caption(tokens, idx, options, env, slf);\n    const refid   = render_footnote_anchor_nameRef(tokens, idx, options, env, slf);\n\n    // check if multiple footnote references are bunched together:\n    // IFF they are, we should separate them with commas.\n    //\n    // Exception: when next token has an extra text (`meta.text`) the\n    // bunching together is not a problem as them the output will render\n    // like this: `bla<sup>1</sup><a>text<sup>2</sup></a>`, ergo a look\n    // like this: `bla¹text²` instead of bunched footnotes references ¹ and ²\n    // that would (without the extra comma injection) look like `bla¹²` instead\n    // of `x¹⁺²` (here '+' instead of ',' comma, but you get the idea -- there's no\n    // Unicode superscript-comma so that's why I used unicode superscript-plus\n    // in this 'ascii art' example).\n    //\n    const next_token = tokens[idx + 1] || {};\n    const next_token_meta = next_token.meta || {};\n    const bunched_footnote_refs = next_token.type === 'footnote_ref' && !next_token_meta.text;\n\n    if (tokens[idx].meta.text) {\n      return '<a href=\"#fn' + id + '\" id=\"fnref' + refid + '\">' +\n            tokens[idx].meta.text +\n            '<sup class=\"footnote-ref\">' + caption + '</sup></a>' +\n            (bunched_footnote_refs ? '<sup class=\"footnote-ref\">,</sup>' : '');\n    }\n\n    return `<sup class=\"footnote-ref\"><a href=\"#fn${ id }\" id=\"fnref${ refid }\">${ caption }</a>${ bunched_footnote_refs ? ',' : '' }</sup>`;\n  }\n\n  function render_footnote_block_open(tokens, idx, options) {\n    const header = tokens[idx].markup;\n    return (options.xhtmlOut ? '<hr class=\"footnotes-sep\" />\\n' : '<hr class=\"footnotes-sep\">\\n') +\n         '<section class=\"footnotes\">\\n' +\n           (header ? '<h3 class=\"footnotes-header\">' + header + '</h3>' : '') +\n         '<ul class=\"footnotes-list\">\\n';\n  }\n\n  function render_footnote_block_close() {\n    return '</ul>\\n</section>\\n';\n  }\n\n  function render_footnote_reference_open(tokens, idx, options) {\n    return '<!-- footnote reference start -->\\n';\n  }\n\n  function render_footnote_reference_close() {\n    return '<!-- footnote reference end -->\\n';\n  }\n\n  function render_footnote_mark_end_of_block() {\n    return '<!-- footnote dump marker -->\\n';\n  }\n\n  function render_footnote_open(tokens, idx, options, env, slf) {\n    const id = render_footnote_anchor_name(tokens, idx, options, env, slf);\n    const caption = render_footnote_caption(tokens, idx, options, env, slf);\n\n    // allow both a JavaWScript --> CSS approach via `data-footnote-caption`\n    // and a classic CSS approach while a display:inline-block SUP presenting\n    // the LI 'button' instead:\n    return `<li tabindex=\"-1\" id=\"fn${ id }\" class=\"footnote-item\" data-footnote-caption=\"${ caption }\"><span class=\"footnote-caption\"><sup class=\"footnote-caption\">${ caption }</sup></span><span class=\"footnote-content\">`;\n  }\n\n  function render_footnote_close() {\n    return '</span></li>\\n';\n  }\n\n  function render_footnote_anchor(tokens, idx, options, env, slf) {\n    let refid = render_footnote_n(tokens, idx, false);\n    refid = plugin_options.anchorFn(refid, false, tokens, idx, options, env, slf);\n\n    /* ↩ with escape code to prevent display as Apple Emoji on iOS */\n    return ' <a href=\"#fnref' + refid + '\" class=\"footnote-backref\">\\u21a9\\uFE0E</a>';\n  }\n\n\n  md.renderer.rules.footnote_ref          = render_footnote_ref;\n  md.renderer.rules.footnote_block_open   = render_footnote_block_open;\n  md.renderer.rules.footnote_block_close  = render_footnote_block_close;\n  md.renderer.rules.footnote_reference_open   = render_footnote_reference_open;\n  md.renderer.rules.footnote_reference_close  = render_footnote_reference_close;\n  md.renderer.rules.footnote_mark_end_of_block = render_footnote_mark_end_of_block;\n  md.renderer.rules.footnote_open         = render_footnote_open;\n  md.renderer.rules.footnote_close        = render_footnote_close;\n  md.renderer.rules.footnote_anchor       = render_footnote_anchor;\n\n  function obtain_footnote_info_slot(env, label: string|null, at_definition: boolean) {\n    if (!env.footnotes) {\n      env.footnotes = {\n        // map label tto ID:\n        refs: {},\n        // store footnote info indexed by ID\n        list: [],\n        // remap ID to re-ordered ID (determines placement order for section notes and endnotes)\n        idMap: [ 0 ],\n        idMapCounter: 0\n      };\n    }\n\n    // When label is NULL, this is a request from in INLINE NOTE.\n\n    // NOTE: IDs are index numbers, BUT they start at 1 instead of 0 to make life easier in check code:\n    let footnoteId;\n    let infoRec;\n    // label as index: prepend ':' to avoid conflict with Object.prototype members\n    if (label == null || !env.footnotes.refs[':' + label]) {\n      footnoteId = Math.max(1, env.footnotes.list.length);\n      infoRec = {\n        id: footnoteId,\n        label,\n        labelOverride: null,\n        mode: null,\n        content: null,\n        tokens: null,\n        count: 0\n      };\n      env.footnotes.list[footnoteId] = infoRec;\n      if (label != null) {\n        env.footnotes.refs[':' + label] = footnoteId;\n      }\n    } else {\n      footnoteId = env.footnotes.refs[':' + label];\n      infoRec = env.footnotes.list[footnoteId];\n      console.assert(!!infoRec, 'expects non-NULL footnote info record');\n    }\n\n    // now check if the idMap[] has been set up already as well. This depends on\n    // when WE are invoked (`at_definition`) and the configured `options.sortOrder`:\n    switch (plugin_options.sortOrder) {\n    // 0: first *appearance* in the text\n    default:\n    case 0:\n      // basically, this means: order as-is\n      if (!env.footnotes.idMap[footnoteId]) {\n        env.footnotes.idMap[footnoteId] = ++env.footnotes.idMapCounter;\n      }\n      break;\n\n    // 1: first *reference* in the text\n    case 1:\n      if (!at_definition && !env.footnotes.idMap[footnoteId]) {\n        // first reference is now!\n        env.footnotes.idMap[footnoteId] = ++env.footnotes.idMapCounter;\n      }\n      break;\n\n    // 2: *definition* in the text\n    case 2:\n      if (at_definition && !env.footnotes.idMap[footnoteId]) {\n        // definition is now!\n        env.footnotes.idMap[footnoteId] = ++env.footnotes.idMapCounter;\n      }\n      break;\n\n    // 3: sorted alphabetically by label (inline footnotes will end up at the top, before all other notes)\n    case 3:\n      // just note the footnoteId now; this must be re-ordered later when we have collected all footnotes.\n      //\n      // set it up when we get there...\n      break;\n    }\n\n    return infoRec;\n  }\n\n  function find_end_of_block_marker(state, startIndex) {\n    let idx, len;\n    const tokens = state.tokens;\n    for (idx = startIndex, len = tokens.length; idx < len; idx++) {\n      if (tokens[idx].type === 'footnote_mark_end_of_block') { return idx; }\n    }\n    //console.error({ tok: tokens.slice(startIndex), startIndex, idx, len });\n    //throw Error('Should never get here!');\n\n    // Punch a slot into the token stream (at the very end)\n    // for consistency with footnote_mark_end_of_block():\n    //footnote_mark_end_of_block(state, startLine, endLine, silent);\n    const token = new state.Token('footnote_mark_end_of_block', '', 0);\n    token.hidden = true;\n    //token.meta = {\n    //  EndOfFile: true\n    //};\n    tokens.push(token);\n    return tokens.length - 1;\n  }\n\n  function update_end_of_block_marker(state, footnoteId) {\n    // inject marker into parent = block level token stream to announce the advent of an (inline) footnote:\n    // because the markdown_it code uses a for() loop to go through the parent nodes while parsing the\n    // 'inline' chunks, we CANNOT safely inject a marker BEFORE the chunk, only AFTERWARDS:\n    const parentState = state.env.parentState;\n    const parentIndex = state.env.parentTokenIndex;\n    const markerTokenIndex = find_end_of_block_marker(parentState, parentIndex + 1);\n    const token = parentState.tokens[markerTokenIndex];\n    if (!token.meta) {\n      token.meta = {\n        footnote_list: []\n      };\n    }\n    token.meta.footnote_list.push(footnoteId);\n  }\n\n  // Mark end of paragraph/heading/whatever BLOCK (or rather: START of the next block!)\n  function footnote_mark_end_of_block(state, startLine, endLine, silent) {\n    if (!silent && state.tokens.length > 0) {\n      const token = state.push('footnote_mark_end_of_block', '', 0);\n      token.hidden = true;\n    }\n    return false;\n  }\n\n  // Process footnote block definition\n  function footnote_def(state, startLine, endLine, silent) {\n    let oldBMark, oldTShift, oldSCount, oldParentType, pos, label, token,\n        initial, offset, ch, posAfterColon,\n        start = state.bMarks[startLine] + state.tShift[startLine],\n        max = state.eMarks[startLine];\n\n    // line should be at least 6 chars - \"[^x]: \" or \"[^x]:> \"\n    if (start + 5 > max) { return false; }\n\n    if (state.src.charCodeAt(start) !== 0x5B/* [ */) { return false; }\n    if (state.src.charCodeAt(start + 1) !== 0x5E/* ^ */) { return false; }\n\n    for (pos = start + 2; pos < max; pos++) {\n      if (state.src.charCodeAt(pos) === 0x0A /* LF */) { return false; }\n      if (state.src.charCodeAt(pos) === 0x5D /* ] */) {\n        break;\n      }\n    }\n    const labelEnd = pos;\n\n    if (pos === start + 2) { return false; } // no empty footnote labels\n    if (pos + 1 >= max || state.src.charCodeAt(++pos) !== 0x3A /* : */) { return false; }\n\n    const mode_rec = determine_mode(state.src[pos + 1], '=');   // default mode is section_note mode.\n    if (mode_rec.fromInput) { pos++; }\n    const mode = mode_rec.mode;\n\n    if (pos + 1 >= max || state.src.charCodeAt(++pos) !== 0x20 /* space */) { return false; }\n    if (silent) { return true; }\n    pos++;\n\n    label = state.src.slice(start + 2, labelEnd);\n    let text;\n    if (label.match(/^(\\S+)\\s+(.+)$/)) {\n      label = RegExp.$1;\n      text = RegExp.$2;\n    }\n\n    console.error('extracted label = ', { label, text, labelEnd, pos, start });\n\n    // Now see if we already have a footnote ID for this footnote label:\n    // fetch it if we have one and otherwise produce a new one so everyone\n    // can use this from now on.\n    //\n    // This scenario is possible when the footnote *definition* comes BEFORE\n    // the first actual footnote *use* (*reference*). This is UNUSUAL when people\n    // write texts, but it is *not impossible*, particularly now that we have\n    // specified-by-design that endnotes can be marked as such (`[^label]:: note text`)\n    // and freely mixed with sidenotes (`[^label]:> note text`) and section\n    // notes (`[^label]:= note text` (explicit mode) or `[^label]: note text`\n    // (implicit mode)), where *section notes* will placed at the spot in the text\n    // flow where they were *defined*. Again, highly irregular, BUT someone MAY\n    // feel the need to place some section note *definitions* ABOVE their first\n    // use point.\n    //\n    const infoRec = obtain_footnote_info_slot(state.env, label, true);\n\n    infoRec.labelOverride = text;\n    infoRec.mode = mode;\n\n    token = state.push('footnote_reference_open', '', 1);\n    token.meta = {\n      id: infoRec.id\n    };\n    token.hidden = true;\n\n    oldBMark = state.bMarks[startLine];\n    oldTShift = state.tShift[startLine];\n    oldSCount = state.sCount[startLine];\n    oldParentType = state.parentType;\n\n    posAfterColon = pos;\n    initial = offset = state.sCount[startLine] + pos - (state.bMarks[startLine] + state.tShift[startLine]);\n\n    while (pos < max) {\n      ch = state.src.charCodeAt(pos);\n\n      if (isSpace(ch)) {\n        if (ch === 0x09) {\n          offset += 4 - offset % 4;\n        } else {\n          offset++;\n        }\n      } else {\n        break;\n      }\n\n      pos++;\n    }\n\n    state.tShift[startLine] = pos - posAfterColon;\n    state.sCount[startLine] = offset - initial;\n\n    state.bMarks[startLine] = posAfterColon;\n    state.blkIndent += 4;\n    state.parentType = 'footnote';\n\n    if (state.sCount[startLine] < state.blkIndent) {\n      state.sCount[startLine] += state.blkIndent;\n    }\n\n    state.md.block.tokenize(state, startLine, endLine, true);\n\n    state.parentType = oldParentType;\n    state.blkIndent -= 4;\n    state.tShift[startLine] = oldTShift;\n    state.sCount[startLine] = oldSCount;\n    state.bMarks[startLine] = oldBMark;\n\n    token = state.push('footnote_reference_close', '', -1);\n    token.meta = {\n      id: infoRec.id\n    };\n\n    return true;\n  }\n\n  // Process inline footnotes (^[...] or ^[>...])\n  function footnote_inline(state, silent) {\n    let labelStart,\n        labelEnd,\n        token,\n        tokens,\n        max = state.posMax,\n        start = state.pos;\n\n    if (start + 2 >= max) { return false; }\n    if (state.src.charCodeAt(start) !== 0x5E/* ^ */) { return false; }\n    if (state.src.charCodeAt(start + 1) !== 0x5B/* [ */) { return false; }\n\n    labelStart = start + 2;\n\n    // NOTE: inline notes are automatically considered to be ASIDE notes,\n    // UNLESS otherwise specified!\n    //\n    // Recognized 'modes':\n    // '>': aside note (default for inline notes)\n    // ':': end node\n    // '=': section note (default for regular referenced notes)\n    //\n    // (Also note https://v4.chriskrycho.com/2015/academic-markdown-and-citations.html:\n    // our notes look like this: `[^ref]:` while Academic MarkDown references look\n    // like this: `[@Belawog2012]` i.e. no '^' in there. Hence these can safely co-exist.)\n    //\n    const mode_rec = determine_mode(state.src[start + 2], '>');   // default mode is aside ~ sidenote mode.\n    if (mode_rec.fromInput) {\n      labelStart++;\n    }\n    const mode = mode_rec.mode;\n\n    labelEnd = parseLinkLabel(state, start + 1);\n\n    // parser failed to find ']', so it's not a valid note\n    if (labelEnd < 0) { return false; }\n\n    // We found the end of the link, and know for a fact it's a valid link;\n    // so all that's left to do is to call tokenizer.\n    //\n    if (!silent) {\n      // inline blocks have their own *child* environment in markdown-it v10+.\n      // As the footnotes must live beyond the lifetime of the inline block env,\n      // we must patch them into the `parentState.env` for the footnote_tail\n      // handler to be able to access them afterwards!\n      const parentState = state.env.parentState;\n      const parentEnv = parentState.env;\n\n      // WARNING: claim our footnote slot for there MAY be nested footnotes\n      // discovered in the next inline.parse() call below!\n      const infoRec = obtain_footnote_info_slot(parentEnv, null, true);\n      infoRec.mode = mode;\n      infoRec.count++;\n\n      token = state.push('footnote_ref', '', 0);\n      //token.meta = { id: footnoteId, subId: 0, label: null };\n      token.meta = {\n        id: infoRec.id\n      };\n\n      state.md.inline.parse(\n        state.src.slice(labelStart, labelEnd),\n        state.md,\n        state.env,\n        tokens = []\n      );\n\n      // Now fill our previously claimed slot:\n      infoRec.content = state.src.slice(labelStart, labelEnd);\n      infoRec.tokens = tokens;\n\n      // inject marker into parent = block level token stream to announce the advent of an (inline) footnote:\n      // because the markdown_it code uses a for() loop to go through the parent nodes while parsing the\n      // 'inline' chunks, we CANNOT safely inject a marker BEFORE the chunk, only AFTERWARDS:\n      update_end_of_block_marker(state, infoRec.id);\n\n      //md.block.ruler.enable('footnote_mark_end_of_block');\n    }\n\n    state.pos = labelEnd + 1;\n    state.posMax = max;\n    return true;\n  }\n\n  // Process footnote references with text ([^label ...])\n  function footnote_ref_with_text(state, silent) {\n    let label,\n        pos,\n        footnoteSubId,\n        token,\n        max = state.posMax,\n        start = state.pos;\n\n    // should be at least 6 chars - \"[^l x]\"\n    if (start + 5 > max) { return false; }\n\n    if (state.src.charCodeAt(start) !== 0x5B/* [ */) { return false; }\n    if (state.src.charCodeAt(start + 1) !== 0x5E/* ^ */) { return false; }\n\n    for (pos = start + 2; pos < max; pos++) {\n      if (state.src.charCodeAt(pos) === 0x0A /* linefeed */) { return false; }\n      if (state.src.charCodeAt(pos) === 0x5D /* ] */) {\n        break;\n      }\n    }\n\n    if (pos === start + 2) { return false; } // no empty footnote labels\n    if (pos >= max) { return false; }\n    pos++;\n\n    label = state.src.slice(start + 2, pos - 1);\n    if (!label || !label.match(/^(\\S+)\\s+(.+)$/)) { return false; }\n    label = RegExp.$1;\n    const text = RegExp.$2;\n\n    const infoRec = obtain_footnote_info_slot(state.env, label, false);\n\n    if (!silent) {\n      footnoteSubId = infoRec.count;\n\n      infoRec.count++;\n\n      token = state.push('footnote_ref', '', 0);\n      token.meta = {\n        id: infoRec.id,\n        subId: footnoteSubId\n      };\n\n      update_end_of_block_marker(state, infoRec.id);\n\n      //md.block.ruler.enable('footnote_mark_end_of_block');\n    }\n\n    state.pos = pos;\n    state.posMax = max;\n    return true;\n  }\n\n  // Process footnote references ([^...])\n  function footnote_ref(state, silent) {\n    let label,\n        pos,\n        footnoteSubId,\n        token,\n        max = state.posMax,\n        start = state.pos;\n\n    // should be at least 4 chars - \"[^x]\"\n    if (start + 3 > max) { return false; }\n\n    if (state.src.charCodeAt(start) !== 0x5B/* [ */) { return false; }\n    if (state.src.charCodeAt(start + 1) !== 0x5E/* ^ */) { return false; }\n\n    for (pos = start + 2; pos < max; pos++) {\n      if (state.src.charCodeAt(pos) === 0x20) { return false; }\n      if (state.src.charCodeAt(pos) === 0x0A) { return false; }\n      if (state.src.charCodeAt(pos) === 0x5D /* ] */) {\n        break;\n      }\n    }\n\n    if (pos === start + 2) { return false; } // no empty footnote labels\n    if (pos >= max) { return false; }\n    pos++;\n\n    label = state.src.slice(start + 2, pos - 1);\n\n    const infoRec = obtain_footnote_info_slot(state.env, label, false);\n\n    if (!silent) {\n      footnoteSubId = infoRec.count;\n\n      infoRec.count++;\n\n      token = state.push('footnote_ref', '', 0);\n      token.meta = {\n        id: infoRec.id,\n        subId: footnoteSubId\n      };\n\n      update_end_of_block_marker(state, infoRec.id);\n\n      //md.block.ruler.enable('footnote_mark_end_of_block');\n    }\n\n    state.pos = pos;\n    state.posMax = max;\n    return true;\n  }\n\n  // Glue footnote tokens into appropriate slots of token stream.\n  function footnote_tail(state, startLine, endLine, silent) {\n    let i, l, j, t, lastParagraph, token, tokens, current, currentRefToken,\n        insideRef = false,\n        refTokens = {};\n\n    console.error('@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ TAIL', state.env.footnotes);\n    if (!state.env.footnotes) {\n      // no footnotes at all? --> filter out all 'footnote_mark_end_of_block' chunks:\n      state.tokens = state.tokens.filter(function (tok, idx) {\n        return (tok.type !== 'footnote_mark_end_of_block');\n      });\n      return;\n    }\n\n    // Rewrite the tokenstream to place the aside-footnotes and section footnotes where they need to be:\n    const aside_list = [];\n    const section_list = [];\n    const end_list = [];\n\n    const list = state.env.footnotes.list;\n\n    // extract the tokens constituting the footnote/sidenote *content* and\n    // store that bunch in `refTokens[:<currentLabel>]` instead, to be injected back into\n    // the tokenstream at the appropriate spots.\n    state.tokens = state.tokens.filter(function (tok, idx) {\n      switch (tok.type) {\n      // filter out 'footnote_mark_end_of_block' tokens which follow BLOCKS that do not contain any\n      // footnote/sidenote/endnote references:\n      case 'footnote_mark_end_of_block':\n        if (!tok.meta) return false;\n        if (!tok.meta.footnote_list) return false;\n        break;\n\n      case 'footnote_reference_open':\n        insideRef = true;\n        current = [];\n        currentRefToken = tok;\n/*\n        if (tok.meta.mode === '>') {\n          aside_list.push(idx);\n        }\n*/\n        return true;\n\n      case 'footnote_reference_close':\n        insideRef = false;\n\n        const infoRec = list[tok.meta.id];\n        infoRec.tokens = current;\n\n        return true;\n      }\n      if (insideRef) {\n        current.push(tok);\n      }\n      return !insideRef;\n    });\n\n\n    // execute configured sorting/mapping (`idMap`):\n    switch (plugin_options.sortOrder) {\n    // 0: first *appearance* in the text\n    default:\n    case 0:\n    // 1: first *reference* in the text\n    case 1:\n    // 2: *definition* in the text\n    case 2:\n      // order is specified in the `idMap` already.\n      break;\n\n    // 3: sorted alphabetically by label (inline footnotes will end up at the top, before all other notes)\n    case 3:\n      // the `idMap[]` array has not been set up and must be produced\n      // to turn this into an alphabetically-by-label sort order, where\n      // a `footnoteId` based index will produce the order of appearance.\n      const idMap = [];\n      for (let i = 0; i < list.length; i++) {\n        idMap[i] = i;\n      }\n      idMap.sort((indexA, indexB) => {\n        const infoA = list[indexA];\n        const infoB = list[indexB];\n\n        if (!infoA) return 1;\n        if (!infoB) return -1;\n        // is any of these an inline footnote, i.e. without any label yet? Produce a fake label for sorting then!\n        //\n        // As stated elsewhere: inline section_notes and end_notes will end up above everyone else in this sort order mode.\n        const labelA = infoA.label || `\\x01${ infoA.id }`;\n        const labelB = infoB.label || `\\x01${ infoB.id }`;\n        return labelA.localeCompare(labelB);\n      });\n      console.error('$$$$$$$$$$$$$$$$ sort order map: $$$$$$$$$$$$$$', idMap);\n\n      // Now turn this into a sort order map:\n      const dstMap = state.env.footnotes.idMap;\n      for (let i = 0; i < list.length; i++) {\n        const prio = idMap[i];\n        dstMap[i] = prio;\n      }\n      break;\n    }\n\n\n    let inject_tokens = [];\n\n    token = new state.Token('footnote_block_open', '', 1);\n    token.markup = plugin_options.headerFn(state);\n    inject_tokens.push(token);\n\n    // REMEMBER: we're indexing from 1 for footnote IDs instead of from zero(0),\n    // so the first slot (`list[0]`) will be NULL:\n    for (i = 1, l = list.length; i < l; i++) {\n      const fn = list[i];\n      const inject_start_index = inject_tokens.length;\n\n      token      = new state.Token('footnote_open', '', 1);\n      token.meta = {\n        id: i\n      };\n      inject_tokens.push(token);\n\n      if (fn.tokens) {\n        // process an inline footnote text:\n        token          = new state.Token('paragraph_open', 'p', 1);\n        token.block    = true;\n        inject_tokens.push(token);\n\n        token          = new state.Token('inline', '', 0);\n        token.children = fn.tokens;\n        token.content  = fn.content;\n        inject_tokens.push(token);\n\n        token          = new state.Token('paragraph_close', 'p', -1);\n        token.block    = true;\n        inject_tokens.push(token);\n      } else if (fn.label) {\n        // process a labeled footnote:\n        inject_tokens = inject_tokens.concat(fn.tokens || []);\n      } else {\n        // nothing to inject\n        throw Error('unexpected: should never get here!');\n      }\n\n      if (inject_tokens[inject_tokens.length - 1].type === 'paragraph_close') {\n        lastParagraph = inject_tokens.pop();\n      } else {\n        lastParagraph = null;\n      }\n\n      t = fn.count;\n      if (t < 1) {\n        console.error(`footnote ID ${i} is defined but never used. Footnote will be removed from the output!`, fn);\n        inject_tokens = inject_tokens.slice(0, inject_start_index);\n      } else {\n        for (j = 0; j < t; j++) {\n          token = new state.Token('footnote_anchor', '', 0);\n          token.meta = {\n            id: i,\n            subId: j\n          };\n          inject_tokens.push(token);\n        }\n\n        if (lastParagraph) {\n          inject_tokens.push(lastParagraph);\n        }\n\n        token = new state.Token('footnote_close', '', -1);\n        token.meta = {\n          id: i\n        };\n        inject_tokens.push(token);\n      }\n    }\n\n    token = new state.Token('footnote_block_close', '', -1);\n    inject_tokens.push(token);\n    state.tokens.splice(state.tokens.length, 0, ...inject_tokens);\n\n    // Update state_block too as we have rewritten & REPLACED the token array earlier in this call:\n    // the reference `state.env.state_block.tokens` is still pointing to the OLD token array!\n    state.env.state_block.tokens = state.tokens;\n  }\n\n  // attach ourselves to the start of block handling too\n  md.block.ruler.before('table', 'footnote_mark_end_of_block', footnote_mark_end_of_block);\n\n  md.block.ruler.before('reference', 'footnote_def', footnote_def, { alt: [ 'paragraph', 'reference' ] });\n  md.inline.ruler.after('image', 'footnote_inline', footnote_inline);\n  md.inline.ruler.after('footnote_inline', 'footnote_ref_with_text', footnote_ref_with_text);\n  md.inline.ruler.after('footnote_ref_with_text', 'footnote_ref', footnote_ref);\n  md.core.ruler.after('inline', 'footnote_tail', footnote_tail);\n}\n"],"names":["anchorFnDefault","n","excludeSubId","tokens","idx","options","env","slf","prefix","docId","length","captionFnDefault","headerFnDefault","state","default_plugin_options","anchorFn","captionFn","headerFn","numberSequence","modeOverride","sortOrder","footnote_plugin","md","plugin_options","parseLinkLabel","helpers","isSpace","utils","Object","assign","determine_mode","mode","default_mode","includes","fromInput","determine_footnote_symbol","len","slot","Number","isFinite","delta","dupli","remainder","core","str","i","render_footnote_n","mark","meta","id","subId","render_footnote_mark","token","info","footnotes","list","labelOverride","render_footnote_anchor_name","render_footnote_anchor_nameRef","render_footnote_caption","render_footnote_ref","caption","refid","next_token","next_token_meta","bunched_footnote_refs","type","text","render_footnote_block_open","header","markup","xhtmlOut","render_footnote_block_close","render_footnote_reference_open","render_footnote_reference_close","render_footnote_mark_end_of_block","render_footnote_open","render_footnote_close","render_footnote_anchor","renderer","rules","footnote_ref","footnote_block_open","footnote_block_close","footnote_reference_open","footnote_reference_close","footnote_mark_end_of_block","footnote_open","footnote_close","footnote_anchor","obtain_footnote_info_slot","label","at_definition","refs","idMap","idMapCounter","footnoteId","infoRec","Math","max","content","count","console","assert","find_end_of_block_marker","startIndex","Token","hidden","push","update_end_of_block_marker","parentState","parentIndex","parentTokenIndex","markerTokenIndex","footnote_list","startLine","endLine","silent","footnote_def","oldBMark","oldTShift","oldSCount","oldParentType","pos","initial","offset","ch","posAfterColon","start","bMarks","tShift","eMarks","src","charCodeAt","labelEnd","mode_rec","slice","match","RegExp","$1","$2","error","sCount","parentType","blkIndent","block","tokenize","footnote_inline","labelStart","posMax","parentEnv","inline","parse","footnote_ref_with_text","footnoteSubId","footnote_tail","l","j","t","lastParagraph","current","insideRef","filter","tok","sort","indexA","indexB","infoA","infoB","labelA","labelB","localeCompare","dstMap","prio","inject_tokens","fn","inject_start_index","children","concat","Error","pop","splice","state_block","ruler","before","alt","after"],"mappings":"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"}